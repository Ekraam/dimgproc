// Homework 1// This code performs histogram equalization// Question 2.a.method A and 2.b.method A// This code takes 6 arguments in the following format// program_name input_image.raw output_methodA.raw [BytesPerPixel = 1] [Width = 256] [Height = 256]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <stdio.h>#include <iostream>#include <stdlib.h>#include <math.h>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Height = 256;	int Width = 256;		// Check for proper syntax	if (argc < 5){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "This program performs Histogram equalization" << endl;		cout << "You must have 6 arguments in the following format" << endl;		cout << "program_name input_image.raw output_methodA.raw [BytesPerPixel = 1] [Width = 256] [Height = 256]" << endl;		return 0;	}	//Get the command line parameters in the appropriate variables	else{	  BytesPerPixel = atoi(argv[3]);	  Width = atoi(argv[4]);	  Height = atoi(argv[5]);	}			// Allocate image data array	unsigned char Imagedata[Height][Width][BytesPerPixel];	// Read image (filename specified by first argument) into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Height*Width*BytesPerPixel, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////		//create a blank new image array	unsigned char newImage[Height][Width][BytesPerPixel];	float inputHistogram[256][BytesPerPixel];	float cdf[256][BytesPerPixel];	//initialize the inputHistogram and cdf to 0	for (int channels=0; channels<BytesPerPixel; channels++){	  for (int grayScale=0; grayScale<=255; grayScale++){	      inputHistogram[grayScale][channels] = 0;	      cdf[grayScale][channels] = 0;	  }	}	//populate the histogram	for (int channels=0; channels<BytesPerPixel; channels++){	  for (int row=0; row<Height; row++){	    for (int col=0; col<Width; col++){	      inputHistogram[Imagedata[row][col][channels]][channels]++ ;	    }	  }	}	//normalize the histogram	for (int channels=0; channels<BytesPerPixel; channels++){	  for (int grayScale=0; grayScale<=255; grayScale++){	    inputHistogram[grayScale][channels] = inputHistogram[grayScale][channels]/(Height*Width);	  }	}	//calculate the CDF	for (int channels=0; channels<BytesPerPixel; channels++){	  cdf[0][channels] = inputHistogram[0][channels];	  for (int grayScale=1; grayScale<=255; grayScale++){	    cdf[grayScale][channels] = inputHistogram[grayScale][channels]+cdf[grayScale-1][channels];	  }	}	//mapping to new histogram	for (int channels=0; channels<BytesPerPixel; channels++){	  for (int row=0; row<Height; row++){	    for (int col=0; col<Width; col++){	      int grayVal = Imagedata[row][col][channels];	      newImage[row][col][channels] = (unsigned char)(cdf[grayVal][channels]*255);	    }	  }	}	// Write image data (filename specified by second argument) from image data matrix	if (!(file=fopen(argv[2],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(newImage, sizeof(unsigned char), Height*Width*BytesPerPixel, file);	fclose(file);	return 0;}