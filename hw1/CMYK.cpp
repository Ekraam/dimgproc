// Homework 1// This code converts RGB to CMYK and saves the individual grayscale channels// Question 1.b.1// This code takes 9 arguments in the following format// program_name input_image.raw output_image.raw output_C.raw output_M.raw output_Y.raw [BytesPerPixel = 1] [Width = 256] [Height = 256]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <stdio.h>#include <iostream>#include <stdlib.h>#include <math.h>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Height = 256;	int Width = 256;		// Check for proper syntax	if (argc < 8){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "This program is for converting RGB image to CMYK" << endl;		cout << "You must have 10 arguments in the following format" << endl;		cout << "program_name input_image.raw output_image.raw output_C.raw output_M.raw output_Y.raw [BytesPerPixel = 1] [Width = 256] [Height = 256]" << endl;		return 0;	}	//Get the command line parameters in the appropriate variables	else{	  BytesPerPixel = atoi(argv[6]);	  Width = atoi(argv[7]);	  Height = atoi(argv[8]);	}			// Allocate image data array	unsigned char Imagedata[Height][Width][BytesPerPixel];	// Read image (filename specified by first argument) into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Height*Width*BytesPerPixel, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////		//create a blank new image array	float newImage[Height][Width][BytesPerPixel];	float newImage_C[Height][Width];	float newImage_M[Height][Width];	float newImage_Y[Height][Width];	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    newImage_C[row][col] = 1 - (float)Imagedata[row][col][0]/(float)255;	    newImage_M[row][col] = 1 - (float)Imagedata[row][col][1]/(float)255;	    newImage_Y[row][col] = 1 - (float)Imagedata[row][col][2]/(float)255;	    cout<< (float)newImage_C[row][col] << endl;	  }	}	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    newImage[row][col][0] = newImage_C[row][col];	    newImage[row][col][1] = newImage_M[row][col];	    newImage[row][col][2] = newImage_Y[row][col];	  }	}	// Write image data (filename specified by second argument) from image data matrix	if (!(file=fopen(argv[2],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(newImage, sizeof(float), Height*Width*BytesPerPixel, file);	fclose(file);	if (!(file=fopen(argv[3],"wb"))) {		cout << "Cannot open file: " << argv[3] << endl;		exit(1);	}	fwrite(newImage_C, sizeof(float), Height*Width, file);	fclose(file);	if (!(file=fopen(argv[4],"wb"))) {		cout << "Cannot open file: " << argv[4] << endl;		exit(1);	}	fwrite(newImage_M, sizeof(float), Height*Width, file);	fclose(file);	if (!(file=fopen(argv[5],"wb"))) {		cout << "Cannot open file: " << argv[5] << endl;		exit(1);	}	fwrite(newImage_Y, sizeof(float), Height*Width, file);	fclose(file);	return 0;}