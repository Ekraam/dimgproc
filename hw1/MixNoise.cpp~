// Homework 1// This code attempts to remove mixed noise from an image.// Question 3.a// This code takes 6 arguments in the following format// program_name input_image.raw output_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <stdio.h>#include <iostream>#include <stdlib.h>#define _USE_MATH_DEFINES#include <math.h>#include <cmath>#include <vector>#include <algorithm>using namespace std;//the median filtering functionint medianFiltering(vector<vector <int> > array, int row, int col){  int medianArray[9] = {array[row-2][col], array[row-1][col], array[row][col], array[row+1][col], array[row+2][col], array[row][col-2], array[row][col-1], array[row][col+1], array[row][col+2]};    sort(medianArray, medianArray+9);  return medianArray[4];}int linearFiltering(vector<vector <int> > array, int row, int col){  int windowArraySum = array[row-2][col-2] + array[row-1][col] + array[row-1][col+1] + array[row][col-1] + array[row][col] + array[row][col+1] + array[row+1][col-1] + array[row+1][col] + array[row+1][col+1];  int mean = windowArraySum/9.0;  return mean;}int gaussianFiltering(vector<vector <int> > array, int row, int col){  int windowArraySum = array[row-2][col-2] + 2*array[row-1][col] + array[row-1][col+1] + 2*array[row][col-1] + 4*array[row][col] + 2*array[row][col+1] + array[row+1][col-1] + 2*array[row+1][col] + array[row+1][col+1];  int mean = windowArraySum/16.0;  return mean;}int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Height = 256;	int Width = 256;		// Check for proper syntax	if (argc < 5){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "This program performs denoising" << endl;		cout << "You must have 6 arguments in the following format" << endl;		cout << "program_name input_noisy_image.raw output_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256]" << endl;		return 0;	}	//Get the command line parameters in the appropriate variables	else{	  BytesPerPixel = atoi(argv[3]);	  Width = atoi(argv[4]);	  Height = atoi(argv[5]);	}			// Allocate image data array	unsigned char Imagedata[Height][Width][BytesPerPixel];	// Read noisyImage into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Height*Width*BytesPerPixel, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////		//create blank new image arrays	unsigned char newImage[Height][Width][BytesPerPixel];	//create a temporaryImage for use between different filtering	vector<vector<vector <int> > > tempImage;	vector<vector<vector <int> > > tempImage2;	tempImage.resize(Height);	tempImage2.resize(Height);	for (int row=0; row<Height; row++){	  tempImage[row].resize(Width);	  tempImage2[row].resize(Width);	  for (int col=0; col<Width; col++){	    tempImage[row][col].resize(BytesPerPixel);	    tempImage2[row][col].resize(BytesPerPixel);	  }	}	//perform median filtering on the image	for (int channel=0; channel<BytesPerPixel; channel++){	  	  //create temporary padded image	  vector<vector<int> > temp4Image; //temporary image with 4 rows and 4 cols padded	  temp4Image.resize(Height+4);	  for (int i=0; i<(Height+4); i++){	    temp4Image[i].resize(Width+4);	  }	  //populate the temporary image	  for (int row=0; row<(Height+4); row++){	    for (int col=0; col<(Width+4); col++){	      if (row==0 || row==1 || col==0 || col==1 || row==Height+2 || row==Height+3 || col==Width+2 || col==Width+3)		temp4Image[row][col] = 0;	      else		temp4Image[row][col] = Imagedata[row-2][col-2][channel];	    }	  }	  cout<< "populating done "<< endl;	  //perform median filtering	  for (int row=0; row<Height; row++){	    for (int col=0; col<Width; col++){	      tempImage[row][col][channel] = (int)medianFiltering(temp4Image, row+2, col+2);		}	  }	  cout << "Channel " << channel << " done " << endl;	}//end of median filtering channel loop		//perform linear filtering on the image	for (int channel=0; channel<BytesPerPixel; channel++){	  	  //create temporary padded image	  vector<vector<int> > temp4Image; //temporary image with 4 rows and 4 cols padded	  temp4Image.resize(Height+4);	  for (int i=0; i<(Height+4); i++){	    temp4Image[i].resize(Width+4);	  }	  //populate the temporary image	  for (int row=0; row<(Height+4); row++){	    for (int col=0; col<(Width+4); col++){	      if (row==0 || row==1 || col==0 || col==1 || row==Height+2 || row==Height+3 || col==Width+2 || col==Width+3)		temp4Image[row][col] = 0;	      else		temp4Image[row][col] = tempImage[row-2][col-2][channel];	    }	  }	  cout<< "populating done "<< endl;	  //perform median filtering and store the resutl in newImage	  for (int row=0; row<Height; row++){	    for (int col=0; col<Width; col++){	      tempImage2[row][col][channel] = (int)gaussianFiltering(temp4Image, row+2, col+2);		}	  }	  cout << "Channel " << channel << " done " << endl;	}//end of first linear filtering channel loop	//perform linear filtering on the image	for (int channel=0; channel<BytesPerPixel; channel++){	  	  //create temporary padded image	  vector<vector<int> > temp4Image; //temporary image with 4 rows and 4 cols padded	  temp4Image.resize(Height+4);	  for (int i=0; i<(Height+4); i++){	    temp4Image[i].resize(Width+4);	  }	  //populate the temporary image	  for (int row=0; row<(Height+4); row++){	    for (int col=0; col<(Width+4); col++){	      if (row==0 || row==1 || col==0 || col==1 || row==Height+2 || row==Height+3 || col==Width+2 || col==Width+3)		temp4Image[row][col] = 0;	      else		temp4Image[row][col] = tempImage2[row-2][col-2][channel];	    }	  }	  cout<< "populating done "<< endl;	  //perform median filtering and store the resutl in newImage	  for (int row=0; row<Height; row++){	    for (int col=0; col<Width; col++){	      newImage[row][col][channel] = (unsigned char)gaussianFiltering(temp4Image, row+2, col+2);		}	  }	  cout << "Channel " << channel << " done " << endl;	}//end of 2nd linear filtering channel loop	// Write image data (filename specified by second argument) from image data matrix	if (!(file=fopen(argv[2],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(newImage, sizeof(unsigned char), Height*Width*BytesPerPixel, file);	fclose(file);	return 0;}