// Homework 2// This code implements dithering// Question 2.a// This code takes 6 arguments in the following format// program_name input_image.raw output_image.raw [Width = 256] [Height = 256] [option = I2/I4/I8/A4/GL4]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <stdio.h>#include <iostream>#include <stdlib.h>#define _USE_MATH_DEFINES#include <math.h>#include <time.h>#include <cmath>#include <vector>#include <algorithm>#include <string>using namespace std;int main(int argc, char *argv[]){ 	// Define file pointer and variables	FILE *file;	int Height = 256;	int Width = 256;	string option = "";		// Check for proper syntax	if (argc < 6){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "This program performs dithering" << endl;		cout << "You must have 6 arguments in the following format" << endl;		cout << "program_name input_image.raw output_image.raw [Width = 256] [Height = 256] [option = I2/I4/I8/A4/GL4]" << endl;		return 0;	}	//Get the command line parameters in the appropriate variables	else{	  Width = atoi(argv[3]);	  Height = atoi(argv[4]);	  option = argv[5];	}		// Allocate image data array	unsigned char inputImage[Height][Width];	// Read Image into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(inputImage, sizeof(unsigned char), Height*Width, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	//create blank new image arrays	unsigned char outputImage[Height][Width];		// the bayer matrix values and the A4 matrix provided in question	int I2[2][2] = { {0, 2}, {3, 1} };	int I4[4][4] = { {0, 8, 2, 10}, {12, 4, 14, 6}, {3, 11, 1, 9}, {15, 7, 13, 5} };	int I8[8][8] = { {0, 32, 8, 40, 2, 34, 10, 42}, {48, 16, 56, 24, 50, 18, 58, 26}, {12, 44, 4, 36, 14, 46, 6, 38}, {60, 28, 52, 20, 62, 30, 54, 22}, {3, 35, 11, 43, 1, 33, 9, 41}, {51, 19, 59, 27, 49, 17, 57, 25}, {15, 47, 7, 39, 13, 45, 5, 37}, {63, 31, 55, 23, 61, 29, 53, 21} };	int A4[4][4] = { {14, 10, 11, 15}, {9, 3, 0, 4}, {8, 2, 1, 5}, {13, 7, 6, 12} };		// if the chose option is for I2 matrix	if (option.compare("I2") == 0){	  //create the threshold matrix	  double thresh2[2][2] = {};	  for (int i=0; i<2; i++){	    for (int j=0; j<2; j++){	      thresh2[i][j] = ((I2[i][j]+0.5)*255)/4;	    }	  }	  // binarize the matrix	  for (int row=0; row<Height; row+=2){	    for (int col=0; col<Width; col+=2){	      	      for (int i=0; i<2; i++){		for (int j=0; j<2; j++){		  		  if (inputImage[row+i][col+j]>thresh2[i][j])		    outputImage[row+i][col+j] = 255;		  else		    outputImage[row+i][col+j] = 0;		}	      }	    }	  }	}	  	// if the chose option is for I4 matrix	else if (option.compare("I4") == 0){	  	  //create the threshold matrix	  double thresh4[4][4] = {};	  for (int i=0; i<4; i++){	    for (int j=0; j<4; j++){	      thresh4[i][j] = ((I4[i][j]+0.5)*255)/16;	    }	  }	  	  // binarize the matrix	  for (int row=0; row<Height; row+=4){	    for (int col=0; col<Width; col+=4){	      	      for (int i=0; i<4; i++){		for (int j=0; j<4; j++){		  		  if (inputImage[row+i][col+j]>thresh4[i][j])		    outputImage[row+i][col+j] = 255;		  else		    outputImage[row+i][col+j] = 0;		  		}	      }	      	    }	  }	  	}	// if the chose option is for I8 matrix	else if (option.compare("I8") == 0){	  	  //create the threshold matrix	  double thresh8[8][8] = {};	  for (int i=0; i<8; i++){	    for (int j=0; j<8; j++){	      thresh8[i][j] = ((I8[i][j]+0.5)*255)/64;	    }	  }	  	  // binarize the matrix	  for (int row=0; row<Height; row+=8){	    for (int col=0; col<Width; col+=8){	      	      for (int i=0; i<8; i++){		for (int j=0; j<8; j++){		  		  if (inputImage[row+i][col+j]>thresh8[i][j])		    outputImage[row+i][col+j] = 255;		  else		    outputImage[row+i][col+j] = 0;		  		}	      }	      	    }	  }	  	}	// if the chose option is for A4 matrix	else if (option.compare("A4") == 0){	  	  //create the threshold matrix	  double thresh4[4][4] = {};	  for (int i=0; i<4; i++){	    for (int j=0; j<4; j++){	      thresh4[i][j] = ((A4[i][j]+0.5)*255)/16;	    }	  }	  	  // binarize the matrix	  for (int row=0; row<Height; row+=4){	    for (int col=0; col<Width; col+=4){	      	      for (int i=0; i<4; i++){		for (int j=0; j<4; j++){		  		  if (inputImage[row+i][col+j]>thresh4[i][j])		    outputImage[row+i][col+j] = 255;		  else		    outputImage[row+i][col+j] = 0;		  		}	      }	      	    }	  }	  	}	// if the chose option is for 4 intensity level grayscale	else if (option.compare("GL4") == 0){	  // uncomment for baseline threshold	  // straighforward quantization into 4 levels	  // for the range 0-65, 65-130, 130-195, 195-255	  for (int row=0; row<Height; row++){	    for (int col=0; col<Width; col++){	      if (inputImage[row][col]<65)		outputImage[row][col] = 0;	      else if (inputImage[row][col]<130)		outputImage[row][col] = 85;	      else if (inputImage[row][col]<195)		outputImage[row][col] = 170;	      else		outputImage[row][col] = 255;	    }	  }			}		else{	  cout << "Invalid matrix chosen. Last parameter should be I2 or I4 or I8 or A4" << endl;	} 	// Write image data from image data matrix		if (!(file=fopen(argv[2],"wb"))) {	  cout << "Cannot open file: " << argv[2] << endl;	  exit(1);	}	fwrite(outputImage, sizeof(unsigned char), Height*Width, file);	fclose(file);       		return 0;}