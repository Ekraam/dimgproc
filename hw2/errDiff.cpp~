// Homework 2// This code implements error diffusion// Question 2.b// This code takes 6 arguments in the following format// program_name input_image.raw output_image.raw [Width = 256] [Height = 256] [option = FS/JJN/ST]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <stdio.h>#include <iostream>#include <stdlib.h>#define _USE_MATH_DEFINES#include <math.h>#include <time.h>#include <cmath>#include <vector>#include <algorithm>#include <string>using namespace std;int main(int argc, char *argv[]){ 	// Define file pointer and variables	FILE *file;	int Height = 256;	int Width = 256;	string option = "";		// Check for proper syntax	if (argc < 6){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "This program performs error diffusion" << endl;		cout << "You must have 6 arguments in the following format" << endl;		cout << "program_name input_image.raw output_image.raw [Width = 256] [Height = 256] [option = FS/JJN/ST]" << endl;		return 0;	}	//Get the command line parameters in the appropriate variables	else{	  Width = atoi(argv[3]);	  Height = atoi(argv[4]);	  option = argv[5];	}		// Allocate image data array	unsigned char inputImage[Height][Width];	// Read Image into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(inputImage, sizeof(unsigned char), Height*Width, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	//create blank new image arrays	unsigned char outputImage[Height][Width];	// create a matrix for storing the noise	vector<vector<double> > noise;	noise.resize(Height+4);	for (int row=0; row<Height+4; row++)	  noise[row].resize(Width+4);	// initialize the noise matrix with 0's	for (int row=0; row<Height+4; row++){	  for (int col=0; col<Width+4; col++){	    noise[row][col] = 0;	  }	}			// if the chose option is for Floyd-Steinberg	if (option.compare("FS") == 0){	  	  for (int row=0; row<Height; row++){	    double error = 0;	    // left to right scanning for even rows	    if (row%2==0){	      for (int col=0; col<Width; col++){				if ( ( (inputImage[row][col]/255.0) + noise[row+2][col+2]) > 0.5)		  outputImage[row][col] = 255;		else		  outputImage[row][col] = 0;				  error = ((inputImage[row][col]/255.0) + noise[row+2][col+2]) - (outputImage[row][col]/255.0);		  noise[row+2][col+3] += (7/16.0)*error;		  noise[row+3][col+1] += (3/16.0)*error;		  noise[row+3][col+2] += (5/16.0)*error;		  noise[row+3][col+3] += (1/16.0)*error;		}	    }	    // right to left scanning for odd rows	    else{	      for (int col=Width-1; col>=0; col--){		if ( ( (inputImage[row][col]/255.0) + noise[row+2][col+2]) > 0.5)		  outputImage[row][col] = 255;		else		  outputImage[row][col] = 0;				  error = ((inputImage[row][col]/255.0) + noise[row+2][col+2]) - (outputImage[row][col]/255.0);		  noise[row+2][col+1] += (7/16.0)*error;		  noise[row+3][col+3] += (3/16.0)*error;		  noise[row+3][col+2] += (5/16.0)*error;		  noise[row+3][col+1] += (1/16.0)*error;			      }	    }	  }	}	  	// if the chose option is for JJN	else if (option.compare("JJN") == 0){	  	  for (int row=0; row<Height; row++){	    double error = 0;	    // left to right scanning for even rows	    if (row%2==0){	      for (int col=0; col<Width; col++){				if ( ( (inputImage[row][col]/255.0) + noise[row+1][col+1]) > 0.5)		  outputImage[row][col] = 255;		else		  outputImage[row][col] = 0;				  error = ((inputImage[row][col]/255.0) + noise[row][col]) - (outputImage[row][col]/255.0);		  noise[row+1][col+2] += (7/16.0)*error;		  noise[row+2][col] += (3/16.0)*error;		  noise[row+2][col+1] += (5/16.0)*error;		  noise[row+2][col+2] += (1/16.0)*error;		}	    }	    // right to left scanning for odd rows	    else{	      for (int col=Width-1; col>=0; col--){		if ( ( (inputImage[row][col]/255.0) + noise[row+1][col+1]) > 0.5)		  outputImage[row][col] = 255;		else		  outputImage[row][col] = 0;				  error = ((inputImage[row][col]/255.0) + noise[row][col]) - (outputImage[row][col]/255.0);		  noise[row+1][col] += (7/16.0)*error;		  noise[row+2][col+2] += (3/16.0)*error;		  noise[row+2][col+1] += (5/16.0)*error;		  noise[row+2][col] += (1/16.0)*error;			      }	    }	  }	}	// if the chose option is for Stucki	else if (option.compare("ST") == 0){	  	  	}		else{	  cout << "Invalid option chosen. Last parameter should be FS or JJN or ST" << endl;	} 	// Write image data from image data matrix		if (!(file=fopen(argv[2],"wb"))) {	  cout << "Cannot open file: " << argv[2] << endl;	  exit(1);	}	fwrite(outputImage, sizeof(unsigned char), Height*Width, file);	fclose(file);       		return 0;}