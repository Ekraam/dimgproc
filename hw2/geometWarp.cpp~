// Homework 2// This code implements spatial transform of diamond shape on input image// Question 1.a// This code takes 6 arguments in the following format// program_name input_image.raw output_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <stdio.h>#include <iostream>#include <stdlib.h>#define _USE_MATH_DEFINES#include <math.h>#include <cmath>#include <vector>#include <algorithm>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Height = 256;	int Width = 256;		// Check for proper syntax	if (argc < 6){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "This program performs geometric transform" << endl;		cout << "You must have 6 arguments in the following format" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256]" << endl;		return 0;	}	//Get the command line parameters in the appropriate variables	else{	  BytesPerPixel = atoi(argv[3]);	  Width = atoi(argv[4]);	  Height = atoi(argv[5]);	}			// Allocate image data array	unsigned char Imagedata[Height][Width][BytesPerPixel];	// Read noisyImage into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Height*Width*BytesPerPixel, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////		//create blank new image arrays	unsigned char newImage[Height][Width][BytesPerPixel];	//populate image with 0's	for (int channel=0; channel<3; channel++){	  for (int row=0; row<Height; row++){	    for (int col=0; col<Width; col++){	      newImage[row][col][channel] = 0;	    }	  }	}	//first quadrant transform	int diagonalPixel = 0;	for (int row=0; row<=149; row++){	  diagonalPixel++;	  double conversionRatio = 150.0/diagonalPixel;	  for (int col=150; col<(150+diagonalPixel); col++){	    int multiplier = col-150;	    newImage[row][col][0] = Imagedata[row][150+int(multiplier*conversionRatio)][0];	    newImage[row][col][1] = Imagedata[row][150+int(multiplier*conversionRatio)][1];	    newImage[row][col][2] = Imagedata[row][150+int(multiplier*conversionRatio)][2];	  }	}	    	//second quadrant transform	diagonalPixel = 0;	for (int row=0; row<=149; row++){	  diagonalPixel++;	  double conversionRatio = 150.0/diagonalPixel;	  for (int col=149; col>(149-diagonalPixel); col--){	    int multiplier = 149-col;	    newImage[row][col][0] = Imagedata[row][149-int(multiplier*conversionRatio)][0];	    newImage[row][col][1] = Imagedata[row][149-int(multiplier*conversionRatio)][1];	    newImage[row][col][2] = Imagedata[row][149-int(multiplier*conversionRatio)][2];	  }	  //cout << diagonalPixel << " " << conversionRatio  << endl;	}	//third quadrant transform	diagonalPixel = 150;	for (int row=150; row<=299; row++){	  diagonalPixel--;	  double conversionRatio = 150.0/diagonalPixel;	  for (int col=149; col>(149-diagonalPixel); col--){	    int multiplier = 149-col;	    newImage[row][col][0] = Imagedata[row][149-int(multiplier*conversionRatio)][0];	    newImage[row][col][1] = Imagedata[row][149-int(multiplier*conversionRatio)][1];	    newImage[row][col][2] = Imagedata[row][149-int(multiplier*conversionRatio)][2];	  }	}	// Write image data (filename specified by second argument) from image data matrix	if (!(file=fopen(argv[2],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(newImage, sizeof(unsigned char), Height*Width*BytesPerPixel, file);	fclose(file);	return 0;}