// Homework 2// This code implements homographic transform and image overlay// Question 1.a// This code takes 7 arguments in the following format// program_name input_image.raw logo_image.raw output_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <stdio.h>#include <iostream>#include <stdlib.h>#define _USE_MATH_DEFINES#include <math.h>#include <cmath>#include <vector>#include <algorithm>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel = 3;	int Height = 256;	int Width = 256;	int BytesPerPixel_logo = 3;	int Height_logo = 256;	int Width_logo = 256;	int background = 0;		// Check for proper syntax	if (argc < 11){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "This program performs geometric transform" << endl;		cout << "You must have 11 arguments in the following format" << endl;		cout << "program_name input_image.raw logo_image.raw output_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256] [BytesPerPixel_Logo = 1] [Width_Logo = 256] [Height_Logo = 256] [background = 1]" << endl;		return 0;	}	//Get the command line parameters in the appropriate variables	else{	  BytesPerPixel = atoi(argv[4]);	  Width = atoi(argv[5]);	  Height = atoi(argv[6]);	  BytesPerPixel_logo = atoi(argv[7]);	  Width_logo = atoi(argv[8]);	  Height_logo = atoi(argv[9]);	  background = atoi(argv[10]);	}			// Allocate image data array	unsigned char Imagedata[Height][Width][BytesPerPixel];	unsigned char logoImage[Height_logo][Width_logo][BytesPerPixel_logo];	// Read Image into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Height*Width*BytesPerPixel, file);	fclose(file);	// Read logo image into image data matrix	if (!(file=fopen(argv[2],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(logoImage, sizeof(unsigned char), Height_logo*Width_logo*BytesPerPixel_logo, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////		//create blank new image arrays	unsigned char newImage[Height][Width][BytesPerPixel];	//replicate the target image with the field image	for (int channel=0; channel<3; channel++){	  for (int row=0; row<Height; row++){	    for (int col=0; col<Width; col++){	      newImage[row][col][channel] = Imagedata[row][col][channel];	    }	  }	}	// inverse H matrix values - uncomment the appropriate one	// for tartans	//double Hinv[9] = {0.73722705, 0.56458960, -614.335849959, -1.0653810, 0.06689382, 602.3186942, 0.00231822, -0.00050574472, -0.1944968594};	// for trojans	double Hinv[9] = {0.9351, 0.7405, -797.7674, -1.4171, 0.0996, 768.1136, 0.0025, -0.0005, -0.2072};	//loop over a large area and replace the target pixels with logo pixels	for (int row=440; row<=570; row++){	  for (int col=400; col<=620; col++){	    	    double w2 = 1/(Hinv[6]*row + Hinv[7]*col + Hinv[8]);	    double x1 = row*w2*Hinv[0] + col*w2*Hinv[1] + w2*Hinv[2];	    double y1 = row*w2*Hinv[3] + col*w2*Hinv[4] + w2*Hinv[5];	    //change values only if mapping is in valid range	    //if (x1>=27 && x1<=126 && y1<=307 && y1>=36){	    if (x1>=23 && x1<=144 && y1<=337 && y1>=15){	    	      //coordinates of surrounding pixels	      int row1 = int(floor(x1));	      int row2 = int(ceil(x1));	      int col1 = int(floor(y1));	      int col2 = int(ceil(y1));	    	      double a = x1 - row1;	      double b = y1 - col1; 	      	      //corresponding pixel values from the logo image	      int red = (int)((1-b)*((1-a)*logoImage[row1][col1][0] + a*logoImage[row2][col1][0]) + (b)*((1-a)*logoImage[row1][col2][0] + a*logoImage[row2][col2][0]));	      int green = (int)((1-b)*((1-a)*logoImage[row1][col1][1] + a*logoImage[row2][col1][1]) + (b)*((1-a)*logoImage[row1][col2][1] + a*logoImage[row2][col2][1]));	      int blue = (int)((1-b)*((1-a)*logoImage[row1][col1][2] + a*logoImage[row2][col1][2]) + (b)*((1-a)*logoImage[row1][col2][2] + a*logoImage[row2][col2][2]));	      	      //replace target image values with logo pixels if they are not black	      if (red>=5 && green>=5 && blue>=5 && background==0){		newImage[row][col][0] = (unsigned char)red;		newImage[row][col][1] = (unsigned char)green;		newImage[row][col][2] = (unsigned char)blue;	      }	      else if (red!=255 && green!=255 && blue!=255 && background==1){		newImage[row][col][0] = (unsigned char)red;		newImage[row][col][1] = (unsigned char)green;		newImage[row][col][2] = (unsigned char)blue;	      }	    }	  }	}		// Write image data from image data matrix	if (!(file=fopen(argv[3],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(newImage, sizeof(unsigned char), Height*Width*BytesPerPixel, file);	fclose(file);	return 0;}