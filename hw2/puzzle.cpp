// Homework 2// This code matches puzzle pieces to their respective locations in the target image// Question 1.b// This code takes 15 arguments in the following format// program_name piece_image.raw hillary_image.raw trump_image.raw output_hillary_image.raw output_trump_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256] [BytesPerPixel_hillary = 1] [Width_hillary = 256] [Height_hillary = 256] [BytesPerPixel_trump = 1] [Width_trump = 256] [Height_trump = 256]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <stdio.h>#include <iostream>#include <stdlib.h>#define _USE_MATH_DEFINES#include <math.h>#include <cmath>#include <vector>#include <algorithm>using namespace std;int main(int argc, char *argv[]){ 	// Define file pointer and variables	FILE *file;	int BytesPerPixel = 3;	int Height = 256;	int Width = 256;	int BytesPerPixel_hillary = 3;	int Height_hillary = 256;	int Width_hillary = 256;	int BytesPerPixel_trump = 3;	int Height_trump = 256;	int Width_trump = 256;		// Check for proper syntax	if (argc < 15){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "This program matches puzzle pieces to their respective locations in the target image" << endl;		cout << "You must have 11 arguments in the following format" << endl;		cout << "program_name piece_image.raw hillary_image.raw trump_image.raw output_hillary_image.raw output_trump_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256] [BytesPerPixel_hillary = 1] [Width_hillary = 256] [Height_hillary = 256] [BytesPerPixel_trump = 1] [Width_trump = 256] [Height_trump = 256]" << endl;		return 0;	}	//Get the command line parameters in the appropriate variables	else{	  BytesPerPixel = atoi(argv[6]);	  Width = atoi(argv[7]);	  Height = atoi(argv[8]);	  BytesPerPixel_hillary = atoi(argv[9]);	  Width_hillary = atoi(argv[10]);	  Height_hillary = atoi(argv[11]);	  BytesPerPixel_trump = atoi(argv[12]);	  Width_trump = atoi(argv[13]);	  Height_trump = atoi(argv[14]);	}		// Allocate image data array	unsigned char pieceImage[Height][Width][BytesPerPixel];	unsigned char hillaryImage[Height_hillary][Width_hillary][BytesPerPixel_hillary];	unsigned char trumpImage[Height_trump][Width_trump][BytesPerPixel_trump];	// Read Image into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(pieceImage, sizeof(unsigned char), Height*Width*BytesPerPixel, file);	fclose(file);	// Read hillary image into image data matrix	if (!(file=fopen(argv[2],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(hillaryImage, sizeof(unsigned char), Height_hillary*Width_hillary*BytesPerPixel_hillary, file);	fclose(file);	// Read trump image into image data matrix	if (!(file=fopen(argv[3],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(trumpImage, sizeof(unsigned char), Height_trump*Width_trump*BytesPerPixel_trump, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	//create blank new image arrays	unsigned char outputHillaryImage[Height_hillary][Width_hillary][BytesPerPixel_hillary];	unsigned char outputTrumpImage[Height_trump][Width_trump][BytesPerPixel_trump];	//create intensity profile histograms	vector<int> pieceVertical;	pieceVertical.resize(Width);	vector<int> pieceHorizontal;	pieceHorizontal.resize(Height);	//populate with 0's	for (int col=0; col<Width; col++)	  pieceVertical[col] = 0;	for (int row=0; row<Height; row++)	  pieceHorizontal[row] = 0;	//sum vertical intensity values across all 3 channels	for (int col=0; col<Width; col++){	  for (int row=0; row<Height; row++){	    for (int channel=0; channel<3; channel++){	      pieceVertical[col] += pieceImage[row][col][channel];	    }	  }	}	//sum horizontal intensity values across all 3 channels	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    for (int channel=0; channel<3; channel++){	      pieceHorizontal[row] += pieceImage[row][col][channel];	    }	  }	}	// find the four coordinates according to intensity profile		//vertical Col Values	int verticalCol[4] = {0, 0, 0, 0};	for (int col=1; col<Width-1; col++){	  if (pieceVertical[col-1]==(765*Height) && pieceVertical[col]!=(765*Height) && verticalCol[0]==0)	    verticalCol[0] = col;	  else if (pieceVertical[col-1]==(765*Height) && pieceVertical[col]!=(765*Height) && verticalCol[0]!=0)	    verticalCol[2] = col;	  else if (pieceVertical[col]!=(765*Height) && pieceVertical[col+1]==(765*Height) && verticalCol[1]==0)	    verticalCol[1] = col;	  else if (pieceVertical[col]!=(765*Height) && pieceVertical[col+1]==(765*Height) && verticalCol[1]!=0)	    verticalCol[3] = col;	  	}	//horizontal Row Values	int horizontalRow[4] = {0, 0, 0, 0};	for (int row=1; row<Height-1; row++){	  	  if (pieceHorizontal[row-1]==(765*Width) && pieceHorizontal[row]!=(765*Width) && horizontalRow[0]==0)	    horizontalRow[0] = row;	  else if (pieceHorizontal[row-1]==(765*Width) && pieceHorizontal[row]!=(765*Width) && horizontalRow[0]!=0)	    horizontalRow[2] = row;	  else if (pieceHorizontal[row]!=(765*Width) && pieceHorizontal[row+1]==(765*Width) && horizontalRow[1]==0)	    horizontalRow[1] = row;	  else if (pieceHorizontal[row]!=(765*Width) && pieceHorizontal[row+1]==(765*Width) && horizontalRow[1]!=0)	    horizontalRow[3] = row;	}	//find the corresponding row values for vertical coordinates	int lowestPixelSum = 1000;	int verticalRow[4] = {0, 0, 0, 0};	for (int i=0; i<4; i++){	  int col = verticalCol[i];	  for (int row=0; row<Height; row++){	    int pixelSum = pieceImage[row][col][0] + pieceImage[row][col][1] + pieceImage[row][col][2];	    if (pixelSum<lowestPixelSum){    	      verticalRow[i] = row;	      lowestPixelSum = pixelSum;	    }	  }	  lowestPixelSum = 1000;	}	//find the corresponding col values for horizontal coordinates	int horizontalCol[4] = {0, 0, 0, 0};	for (int i=0; i<4; i++){	  int row = horizontalRow[i];	  for (int col=0; col<Width; col++){	    int pixelSum = pieceImage[row][col][0] + pieceImage[row][col][1] + pieceImage[row][col][2];	    if (pixelSum<lowestPixelSum){	      horizontalCol[i] = col;	      lowestPixelSum = pixelSum;	    }	  }	  lowestPixelSum = 1000;	}	cout << "Hillary piece image coordinates in clockwise - Row,Col or Height,Width" << endl;	cout << verticalRow[0] << "," << verticalCol[0] << endl;	cout << horizontalRow[0] << "," << horizontalCol[0] << endl;	cout << verticalRow[1] << "," << verticalCol[1] << endl;	cout << horizontalRow[1] << "," << horizontalCol[1] << endl;	cout << "Trump piece image coordinates in clockwise - Row,Col or Height,Width" << endl;	cout << verticalRow[2] << "," << verticalCol[2] << endl;	cout << horizontalRow[2] << "," << horizontalCol[2] << endl;	cout << verticalRow[3] << "," << verticalCol[3] << endl;	cout << horizontalRow[3] << "," << horizontalCol[3] << endl;	//moving to finding coordinates of hillary and trump images		//make 2d matrices of hillary and trump	vector<vector <int> > hillary;	vector<vector <int> > trump;	hillary.resize(Height_hillary);	for (int row=0; row<Height_hillary; row++){	  hillary[row].resize(Width_hillary);	}	trump.resize(Height_trump);	for (int row=0; row<Height_trump; row++){	  trump[row].resize(Width_trump);	}	// fill the matrices with binary values depending if the input image pixel is pure white or not	for (int row=0; row<Height_hillary; row++){	  for (int col=0; col<Width_hillary; col++){	    int pixelSum = hillaryImage[row][col][0]+hillaryImage[row][col][1]+hillaryImage[row][col][2];	    if (pixelSum == 765)	      hillary[row][col] = 1;	    else	      hillary[row][col] = 0;	  }	}	for (int row=0; row<Height_trump; row++){	  for (int col=0; col<Width_trump; col++){	    int pixelSum = trumpImage[row][col][0]+trumpImage[row][col][1]+trumpImage[row][col][2];	    if (pixelSum == 765)	      trump[row][col] = 1;	    else	      trump[row][col] = 0;	  }	}	// corner detection filters for the image	int filter_topleft[9] = {0, 0, 0, 0, 1, 1, 0, 1, 1};	int filter_topright[9] = {0, 0, 0, 1, 1, 0, 1, 1, 0};	int filter_bottomright[9] = {1, 1, 0, 1, 1, 0, 0, 0, 0};	int filter_bottomleft[9] = {0, 1, 1, 0, 1, 1, 0, 0, 0};	// run filters over the binary image to find white corners	int hillary_row[4] = {0, 0, 0, 0};	int hillary_col[4] = {0, 0, 0, 0};	int trump_row[4] = {0, 0, 0, 0};	int trump_col[4] = {0, 0, 0, 0};	// hillary corner coordinates	for (int row=1; row<Height_hillary-1; row++){	  for (int col=1; col<Width_hillary-1; col++){	    if (hillary[row-1][col-1]==filter_topleft[0] && hillary[row-1][col]==filter_topleft[1] && hillary[row-1][col+1]==filter_topleft[2] && hillary[row][col-1]==filter_topleft[3] && hillary[row][col]==filter_topleft[4] && hillary[row][col+1]==filter_topleft[5] && hillary[row+1][col-1]==filter_topleft[6] && hillary[row+1][col]==filter_topleft[7] && hillary[row+1][col+1]==filter_topleft[8]){	      hillary_row[0] = row;	      hillary_col[0] = col;	    }	    if (hillary[row-1][col-1]==filter_topright[0] && hillary[row-1][col]==filter_topright[1] && hillary[row-1][col+1]==filter_topright[2] && hillary[row][col-1]==filter_topright[3] && hillary[row][col]==filter_topright[4] && hillary[row][col+1]==filter_topright[5] && hillary[row+1][col-1]==filter_topright[6] && hillary[row+1][col]==filter_topright[7] && hillary[row+1][col+1]==filter_topright[8]){	      hillary_row[1] = row;	      hillary_col[1] = col;	    }	    if (hillary[row-1][col-1]==filter_bottomright[0] && hillary[row-1][col]==filter_bottomright[1] && hillary[row-1][col+1]==filter_bottomright[2] && hillary[row][col-1]==filter_bottomright[3] && hillary[row][col]==filter_bottomright[4] && hillary[row][col+1]==filter_bottomright[5] && hillary[row+1][col-1]==filter_bottomright[6] && hillary[row+1][col]==filter_bottomright[7] && hillary[row+1][col+1]==filter_bottomright[8]){	      hillary_row[2] = row;	      hillary_col[2] = col;	    }	    if (hillary[row-1][col-1]==filter_bottomleft[0] && hillary[row-1][col]==filter_bottomleft[1] && hillary[row-1][col+1]==filter_bottomleft[2] && hillary[row][col-1]==filter_bottomleft[3] && hillary[row][col]==filter_bottomleft[4] && hillary[row][col+1]==filter_bottomleft[5] && hillary[row+1][col-1]==filter_bottomleft[6] && hillary[row+1][col]==filter_bottomleft[7] && hillary[row+1][col+1]==filter_bottomleft[8]){	      hillary_row[3] = row;	      hillary_col[3] = col;	    }	  }	}	// trump corner coordinates	for (int row=1; row<Height_trump-1; row++){	  for (int col=1; col<Width_trump-1; col++){	    if (trump[row-1][col-1]==filter_topleft[0] && trump[row-1][col]==filter_topleft[1] && trump[row-1][col+1]==filter_topleft[2] && trump[row][col-1]==filter_topleft[3] && trump[row][col]==filter_topleft[4] && trump[row][col+1]==filter_topleft[5] && trump[row+1][col-1]==filter_topleft[6] && trump[row+1][col]==filter_topleft[7] && trump[row+1][col+1]==filter_topleft[8]){	      trump_row[0] = row;	      trump_col[0] = col;	    }	    if (trump[row-1][col-1]==filter_topright[0] && trump[row-1][col]==filter_topright[1] && trump[row-1][col+1]==filter_topright[2] && trump[row][col-1]==filter_topright[3] && trump[row][col]==filter_topright[4] && trump[row][col+1]==filter_topright[5] && trump[row+1][col-1]==filter_topright[6] && trump[row+1][col]==filter_topright[7] && trump[row+1][col+1]==filter_topright[8]){	      trump_row[1] = row;	      trump_col[1] = col;	    }	    if (trump[row-1][col-1]==filter_bottomright[0] && trump[row-1][col]==filter_bottomright[1] && trump[row-1][col+1]==filter_bottomright[2] && trump[row][col-1]==filter_bottomright[3] && trump[row][col]==filter_bottomright[4] && trump[row][col+1]==filter_bottomright[5] && trump[row+1][col-1]==filter_bottomright[6] && trump[row+1][col]==filter_bottomright[7] && trump[row+1][col+1]==filter_bottomright[8]){	      trump_row[2] = row;	      trump_col[2] = col;	    }	    if (trump[row-1][col-1]==filter_bottomleft[0] && trump[row-1][col]==filter_bottomleft[1] && trump[row-1][col+1]==filter_bottomleft[2] && trump[row][col-1]==filter_bottomleft[3] && trump[row][col]==filter_bottomleft[4] && trump[row][col+1]==filter_bottomleft[5] && trump[row+1][col-1]==filter_bottomleft[6] && trump[row+1][col]==filter_bottomleft[7] && trump[row+1][col+1]==filter_bottomleft[8]){	      trump_row[3] = row;	      trump_col[3] = col;	    }	  }	}	//print the coordinates found in the target image	cout << "Hillary target image coordinates in clockwise - Row,Col or Height,Width" << endl;	cout << hillary_row[0] << "," << hillary_col[0] << endl;	cout << hillary_row[1] << "," << hillary_col[1] << endl;	cout << hillary_row[2] << "," << hillary_col[2] << endl;	cout << hillary_row[3] << "," << hillary_col[3] << endl;	cout << "Trump target image coordinates in clockwise - Row,Col or Height,Width" << endl;	cout << trump_row[0] << "," << trump_col[0] << endl;	cout << trump_row[1] << "," << trump_col[1] << endl;	cout << trump_row[2] << "," << trump_col[2] << endl;	cout << trump_row[3] << "," << trump_col[3] << endl;	//inverse hillary address mapping matrix	double hillaryInv[6] = {1.4545, 0.3939, -207.5152, -0.4040, 1.4646, -102.8384};		for (int row=0; row<Height_hillary; row++){	  for (int col=0; col<Width_hillary; col++){	    	    if (row<=hillary_row[3] && row>=hillary_row[0] && col<=hillary_col[1] && col>=hillary_col[0]){	      double pieceRow = hillaryInv[0]*row + hillaryInv[1]*col + hillaryInv[2];	      double pieceCol = hillaryInv[3]*row + hillaryInv[4]*col + hillaryInv[5];	      	      // coordinates of surrounding pixels	      int row1 = int(floor(pieceRow));	      int row2 = int(ceil(pieceRow));	      int col1 = int(floor(pieceCol));	      int col2 = int(ceil(pieceCol));	      	      double a = pieceRow - row1;	      double b = pieceCol - col1; 	      	      // corresponding pixel values from the piece image	      int red = (int)((1-b)*((1-a)*pieceImage[row1][col1][0] + a*pieceImage[row2][col1][0]) + (b)*((1-a)*pieceImage[row1][col2][0] + a*pieceImage[row2][col2][0]));	      int green = (int)((1-b)*((1-a)*pieceImage[row1][col1][1] + a*pieceImage[row2][col1][1]) + (b)*((1-a)*pieceImage[row1][col2][1] + a*pieceImage[row2][col2][1]));	      int blue = (int)((1-b)*((1-a)*pieceImage[row1][col1][2] + a*pieceImage[row2][col1][2]) + (b)*((1-a)*pieceImage[row1][col2][2] + a*pieceImage[row2][col2][2]));	      	      // fill the hole pixels	      outputHillaryImage[row][col][0] = (unsigned char)red;	      outputHillaryImage[row][col][1] = (unsigned char)green;	      outputHillaryImage[row][col][2] = (unsigned char)blue;	    }	    else{	     	      // fill the non-hole pixels	      outputHillaryImage[row][col][0] = hillaryImage[row][col][0];	      outputHillaryImage[row][col][1] = hillaryImage[row][col][1];	      outputHillaryImage[row][col][2] = hillaryImage[row][col][2];	    }	  }	}	//inverse trump address mapping matrix	double trumpInv[6] = {-0.0707, -0.7475, 509.5253, 0.7475, -0.0707, 144.1212};		for (int row=0; row<Height_trump; row++){	  for (int col=0; col<Width_trump; col++){	    	    if (row<=trump_row[3] && row>=trump_row[0] && col<=trump_col[1] && col>=trump_col[0]){	      double pieceRow = trumpInv[0]*row + trumpInv[1]*col + trumpInv[2];	      double pieceCol = trumpInv[3]*row + trumpInv[4]*col + trumpInv[5];	      	      // coordinates of surrounding pixels	      int row1 = int(floor(pieceRow));	      int row2 = int(ceil(pieceRow));	      int col1 = int(floor(pieceCol));	      int col2 = int(ceil(pieceCol));	      	      double a = pieceRow - row1;	      double b = pieceCol - col1; 	      	      // corresponding pixel values from the piece image	      int red = (int)((1-b)*((1-a)*pieceImage[row1][col1][0] + a*pieceImage[row2][col1][0]) + (b)*((1-a)*pieceImage[row1][col2][0] + a*pieceImage[row2][col2][0]));	      int green = (int)((1-b)*((1-a)*pieceImage[row1][col1][1] + a*pieceImage[row2][col1][1]) + (b)*((1-a)*pieceImage[row1][col2][1] + a*pieceImage[row2][col2][1]));	      int blue = (int)((1-b)*((1-a)*pieceImage[row1][col1][2] + a*pieceImage[row2][col1][2]) + (b)*((1-a)*pieceImage[row1][col2][2] + a*pieceImage[row2][col2][2]));	      	      // fill the hole pixels	      outputTrumpImage[row][col][0] = (unsigned char)red;	      outputTrumpImage[row][col][1] = (unsigned char)green;	      outputTrumpImage[row][col][2] = (unsigned char)blue;	    }	    else{	     	      // fill the non-hole pixels	      outputTrumpImage[row][col][0] = trumpImage[row][col][0];	      outputTrumpImage[row][col][1] = trumpImage[row][col][1];	      outputTrumpImage[row][col][2] = trumpImage[row][col][2];	    }	  }	}	// smoothen the images to merge them	//hillary	int firstCol = hillary_col[0];	int secCol = hillary_col[1];	//smooth the two columns	for (int row=hillary_row[0]; row<hillary_row[3]; row++){	  outputHillaryImage[row][firstCol][0] = (unsigned char)((outputHillaryImage[row-1][firstCol-1][0] + 2*outputHillaryImage[row][firstCol-1][0] + outputHillaryImage[row+1][firstCol-1][0] + outputHillaryImage[row-1][firstCol+1][0] + 2*outputHillaryImage[row][firstCol+1][0] + outputHillaryImage[row+1][firstCol+1][0])/8.0);	  outputHillaryImage[row][firstCol][1] = (unsigned char)((outputHillaryImage[row-1][firstCol-1][1] + 2*outputHillaryImage[row][firstCol-1][1] + outputHillaryImage[row+1][firstCol-1][1] + outputHillaryImage[row-1][firstCol+1][1] + 2*outputHillaryImage[row][firstCol+1][1] + outputHillaryImage[row+1][firstCol+1][1])/8.0);	  outputHillaryImage[row][firstCol][2] = (unsigned char)((outputHillaryImage[row-1][firstCol-1][2] + 2*outputHillaryImage[row][firstCol-1][2] + outputHillaryImage[row+1][firstCol-1][2] + outputHillaryImage[row-1][firstCol+1][2] + 2*outputHillaryImage[row][firstCol+1][2] + outputHillaryImage[row+1][firstCol+1][2])/8.0);	  outputHillaryImage[row][secCol][0] = (unsigned char)((outputHillaryImage[row-1][secCol-1][0] + 2*outputHillaryImage[row][secCol-1][0] + outputHillaryImage[row+1][secCol-1][0] + outputHillaryImage[row-1][secCol+1][0] + 2*outputHillaryImage[row][secCol+1][0] + outputHillaryImage[row+1][secCol+1][0])/8.0);	  outputHillaryImage[row][secCol][1] = (unsigned char)((outputHillaryImage[row-1][secCol-1][1] + 2*outputHillaryImage[row][secCol-1][1] + outputHillaryImage[row+1][secCol-1][1] + outputHillaryImage[row-1][secCol+1][1] + 2*outputHillaryImage[row][secCol+1][1] + outputHillaryImage[row+1][secCol+1][1])/8.0);	  outputHillaryImage[row][secCol][2] = (unsigned char)((outputHillaryImage[row-1][secCol-1][2] + 2*outputHillaryImage[row][secCol-1][2] + outputHillaryImage[row+1][secCol-1][2] + outputHillaryImage[row-1][secCol+1][2] + 2*outputHillaryImage[row][secCol+1][2] + outputHillaryImage[row+1][secCol+1][2])/8.0);	}	int firstRow = hillary_row[0];	int secRow = hillary_row[3];	//smooth the two rows	for (int col=hillary_col[0]; col<hillary_col[1]; col++){	  outputHillaryImage[firstRow][col][0] = (unsigned char)((outputHillaryImage[firstRow-1][col-1][0] + 2*outputHillaryImage[firstRow-1][col][0] + outputHillaryImage[firstRow-1][col+1][0] + outputHillaryImage[firstRow+1][col-1][0] + 2*outputHillaryImage[firstRow+1][col][0] + outputHillaryImage[firstRow+1][col+1][0])/8.0);	  outputHillaryImage[firstRow][col][1] = (unsigned char)((outputHillaryImage[firstRow-1][col-1][1] + 2*outputHillaryImage[firstRow-1][col][1] + outputHillaryImage[firstRow-1][col+1][1] + outputHillaryImage[firstRow+1][col-1][1] + 2*outputHillaryImage[firstRow+1][col][1] + outputHillaryImage[firstRow+1][col+1][1])/8.0);	  outputHillaryImage[firstRow][col][2] = (unsigned char)((outputHillaryImage[firstRow-1][col-1][2] + 2*outputHillaryImage[firstRow-1][col][2] + outputHillaryImage[firstRow-1][col+1][2] + outputHillaryImage[firstRow+1][col-1][2] + 2*outputHillaryImage[firstRow+1][col][2] + outputHillaryImage[firstRow+1][col+1][2])/8.0);	  outputHillaryImage[secRow][col][0] = (unsigned char)((outputHillaryImage[secRow-1][col-1][0] + 2*outputHillaryImage[secRow-1][col][0] + outputHillaryImage[secRow-1][col+1][0] + outputHillaryImage[secRow+1][col-1][0] + 2*outputHillaryImage[secRow+1][col][0] + outputHillaryImage[secRow+1][col+1][0])/8.0);	  outputHillaryImage[secRow][col][1] = (unsigned char)((outputHillaryImage[secRow-1][col-1][1] + 2*outputHillaryImage[secRow-1][col][1] + outputHillaryImage[secRow-1][col+1][1] + outputHillaryImage[secRow+1][col-1][1] + 2*outputHillaryImage[secRow+1][col][1] + outputHillaryImage[secRow+1][col+1][1])/8.0);	  outputHillaryImage[secRow][col][2] = (unsigned char)((outputHillaryImage[secRow-1][col-1][2] + 2*outputHillaryImage[secRow-1][col][2] + outputHillaryImage[secRow-1][col+1][2] + outputHillaryImage[secRow+1][col-1][2] + 2*outputHillaryImage[secRow+1][col][2] + outputHillaryImage[secRow+1][col+1][2])/8.0);	}	//trump	firstCol = trump_col[0];	secCol = trump_col[1];	//smooth the two columns	for (int row=trump_row[0]; row<trump_row[3]; row++){	  outputTrumpImage[row][firstCol][0] = (unsigned char)((outputTrumpImage[row-1][firstCol-1][0] + 2*outputTrumpImage[row][firstCol-1][0] + outputTrumpImage[row+1][firstCol-1][0] + outputTrumpImage[row-1][firstCol+1][0] + 2*outputTrumpImage[row][firstCol+1][0] + outputTrumpImage[row+1][firstCol+1][0])/8.0);	  outputTrumpImage[row][firstCol][1] = (unsigned char)((outputTrumpImage[row-1][firstCol-1][1] + 2*outputTrumpImage[row][firstCol-1][1] + outputTrumpImage[row+1][firstCol-1][1] + outputTrumpImage[row-1][firstCol+1][1] + 2*outputTrumpImage[row][firstCol+1][1] + outputTrumpImage[row+1][firstCol+1][1])/8.0);	  outputTrumpImage[row][firstCol][2] = (unsigned char)((outputTrumpImage[row-1][firstCol-1][2] + 2*outputTrumpImage[row][firstCol-1][2] + outputTrumpImage[row+1][firstCol-1][2] + outputTrumpImage[row-1][firstCol+1][2] + 2*outputTrumpImage[row][firstCol+1][2] + outputTrumpImage[row+1][firstCol+1][2])/8.0);	  outputTrumpImage[row][secCol][0] = (unsigned char)((outputTrumpImage[row-1][secCol-1][0] + 2*outputTrumpImage[row][secCol-1][0] + outputTrumpImage[row+1][secCol-1][0] + outputTrumpImage[row-1][secCol+1][0] + 2*outputTrumpImage[row][secCol+1][0] + outputTrumpImage[row+1][secCol+1][0])/8.0);	  outputTrumpImage[row][secCol][1] = (unsigned char)((outputTrumpImage[row-1][secCol-1][1] + 2*outputTrumpImage[row][secCol-1][1] + outputTrumpImage[row+1][secCol-1][1] + outputTrumpImage[row-1][secCol+1][1] + 2*outputTrumpImage[row][secCol+1][1] + outputTrumpImage[row+1][secCol+1][1])/8.0);	  outputTrumpImage[row][secCol][2] = (unsigned char)((outputTrumpImage[row-1][secCol-1][2] + 2*outputTrumpImage[row][secCol-1][2] + outputTrumpImage[row+1][secCol-1][2] + outputTrumpImage[row-1][secCol+1][2] + 2*outputTrumpImage[row][secCol+1][2] + outputTrumpImage[row+1][secCol+1][2])/8.0);	}	firstRow = trump_row[0];	secRow = trump_row[3];	//smooth the two rows	for (int col=trump_col[0]; col<trump_col[1]; col++){	  outputTrumpImage[firstRow][col][0] = (unsigned char)((outputTrumpImage[firstRow-1][col-1][0] + 2*outputTrumpImage[firstRow-1][col][0] + outputTrumpImage[firstRow-1][col+1][0] + outputTrumpImage[firstRow+1][col-1][0] + 2*outputTrumpImage[firstRow+1][col][0] + outputTrumpImage[firstRow+1][col+1][0])/8.0);	  outputTrumpImage[firstRow][col][1] = (unsigned char)((outputTrumpImage[firstRow-1][col-1][1] + 2*outputTrumpImage[firstRow-1][col][1] + outputTrumpImage[firstRow-1][col+1][1] + outputTrumpImage[firstRow+1][col-1][1] + 2*outputTrumpImage[firstRow+1][col][1] + outputTrumpImage[firstRow+1][col+1][1])/8.0);	  outputTrumpImage[firstRow][col][2] = (unsigned char)((outputTrumpImage[firstRow-1][col-1][2] + 2*outputTrumpImage[firstRow-1][col][2] + outputTrumpImage[firstRow-1][col+1][2] + outputTrumpImage[firstRow+1][col-1][2] + 2*outputTrumpImage[firstRow+1][col][2] + outputTrumpImage[firstRow+1][col+1][2])/8.0);	  outputTrumpImage[secRow][col][0] = (unsigned char)((outputTrumpImage[secRow-1][col-1][0] + 2*outputTrumpImage[secRow-1][col][0] + outputTrumpImage[secRow-1][col+1][0] + outputTrumpImage[secRow+1][col-1][0] + 2*outputTrumpImage[secRow+1][col][0] + outputTrumpImage[secRow+1][col+1][0])/8.0);	  outputTrumpImage[secRow][col][1] = (unsigned char)((outputTrumpImage[secRow-1][col-1][1] + 2*outputTrumpImage[secRow-1][col][1] + outputTrumpImage[secRow-1][col+1][1] + outputTrumpImage[secRow+1][col-1][1] + 2*outputTrumpImage[secRow+1][col][1] + outputTrumpImage[secRow+1][col+1][1])/8.0);	  outputTrumpImage[secRow][col][2] = (unsigned char)((outputTrumpImage[secRow-1][col-1][2] + 2*outputTrumpImage[secRow-1][col][2] + outputTrumpImage[secRow-1][col+1][2] + outputTrumpImage[secRow+1][col-1][2] + 2*outputTrumpImage[secRow+1][col][2] + outputTrumpImage[secRow+1][col+1][2])/8.0);	  } 	// Write image data from image data matrix		if (!(file=fopen(argv[4],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(outputHillaryImage, sizeof(unsigned char), Height_hillary*Width_hillary*BytesPerPixel_hillary, file);	fclose(file);		if (!(file=fopen(argv[5],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(outputTrumpImage, sizeof(unsigned char), Height_trump*Width_trump*BytesPerPixel_trump, file);	fclose(file);		return 0;}