// Homework 2// This code implements homographic transform and image overlay// Question 1.a// This code takes 7 arguments in the following format// program_name input_image.raw logo_image.raw output_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <stdio.h>#include <iostream>#include <stdlib.h>#define _USE_MATH_DEFINES#include <math.h>#include <cmath>#include <vector>#include <algorithm>using namespace std;int main(int argc, char *argv[]){ 	// Define file pointer and variables	FILE *file;	int BytesPerPixel = 3;	int Height = 256;	int Width = 256;	int BytesPerPixel_hillary = 3;	int Height_hillary = 256;	int Width_hillary = 256;	int BytesPerPixel_trump = 3;	int Height_trump = 256;	int Width_trump = 256;		// Check for proper syntax	if (argc < 11){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "This program performs geometric transform" << endl;		cout << "You must have 11 arguments in the following format" << endl;		cout << "program_name piece_image.raw hillary_image.raw trump_image.raw output_hillary_image.raw output_trump_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256] [BytesPerPixel_hillary = 1] [Width_hillary = 256] [Height_hillary = 256] [BytesPerPixel_trump = 1] [Width_trump = 256] [Height_trump = 256]" << endl;		return 0;	}	//Get the command line parameters in the appropriate variables	else{	  BytesPerPixel = atoi(argv[6]);	  Width = atoi(argv[7]);	  Height = atoi(argv[8]);	  BytesPerPixel_hillary = atoi(argv[9]);	  Width_hillary = atoi(argv[10]);	  Height_hillary = atoi(argv[11]);	  BytesPerPixel_trump = atoi(argv[12]);	  Width_trump = atoi(argv[13]);	  Height_trump = atoi(argv[14]);	}		// Allocate image data array	unsigned char pieceImage[Height][Width][BytesPerPixel];	unsigned char hillaryImage[Height_hillary][Width_hillary][BytesPerPixel_hillary];	unsigned char trumpImage[Height_trump][Width_trump][BytesPerPixel_trump];	// Read Image into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(pieceImage, sizeof(unsigned char), Height*Width*BytesPerPixel, file);	fclose(file);	// Read hillary image into image data matrix	if (!(file=fopen(argv[2],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(hillaryImage, sizeof(unsigned char), Height_hillary*Width_hillary*BytesPerPixel_hillary, file);	fclose(file);	// Read trump image into image data matrix	if (!(file=fopen(argv[3],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(trumpImage, sizeof(unsigned char), Height_trump*Width_trump*BytesPerPixel_trump, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	//create blank new image arrays	unsigned char outputHillaryImage[Height_hillary][Width_hillary][BytesPerPixel_hillary];	unsigned char outputTrumpImage[Height_trump][Width_trump][BytesPerPixel_trump];	//create intensity profile histograms	vector<int> pieceVertical;	pieceVertical.resize(Width);	vector<int> pieceHorizontal;	pieceHorizontal.resize(Height);	//populate with 0's	for (int col=0; col<Width; col++)	  pieceVertical[col] = 0;	for (int row=0; row<Height; row++)	  pieceHorizontal[row] = 0;	/*	vector<int> pieceVerticalDiff;	pieceVerticalDiff.resize(Width);	vector<int> pieceHorizontalDiff;	pieceHorizontalDiff.resize(Height);	*/	//sum vertical intensity values across all 3 channels	for (int col=0; col<Width; col++){	  for (int row=0; row<Height; row++){	    for (int channel=0; channel<3; channel++){	      pieceVertical[col] += pieceImage[row][col][channel];	    }	  }	}	//sum horizontal intensity values across all 3 channels	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    for (int channel=0; channel<3; channel++){	      pieceHorizontal[row] += pieceImage[row][col][channel];	    }	  }	}	// find the four coordinates according to intensity profile		//vertical Col Values	int verticalCol[4] = {0, 0, 0, 0};	for (int col=1; col<Width-1; col++){	  if (pieceVertical[col-1]==(765*Height) && pieceVertical[col]!=(765*Height) && verticalCol[0]==0)	    verticalCol[0] = col;	  else if (pieceVertical[col-1]==(765*Height) && pieceVertical[col]!=(765*Height) && verticalCol[0]!=0)	    verticalCol[2] = col;	  else if (pieceVertical[col]!=(765*Height) && pieceVertical[col+1]==(765*Height) && verticalCol[1]==0)	    verticalCol[1] = col;	  else if (pieceVertical[col]!=(765*Height) && pieceVertical[col+1]==(765*Height) && verticalCol[1]!=0)	    verticalCol[3] = col;	  	}	//horizontal Row Values	int horizontalRow[4] = {0, 0, 0, 0};	for (int row=1; row<Height-1; row++){	  	  if (pieceHorizontal[row-1]==(765*Width) && pieceHorizontal[row]!=(765*Width) && horizontalRow[0]==0)	    horizontalRow[0] = row;	  else if (pieceHorizontal[row-1]==(765*Width) && pieceHorizontal[row]!=(765*Width) && horizontalRow[0]!=0)	    horizontalRow[2] = row;	  else if (pieceHorizontal[row]!=(765*Width) && pieceHorizontal[row+1]==(765*Width) && horizontalRow[1]==0)	    horizontalRow[1] = row;	  else if (pieceHorizontal[row]!=(765*Width) && pieceHorizontal[row+1]==(765*Width) && horizontalRow[1]!=0)	    horizontalRow[3] = row;	}	//find the corresponding row values for vertical coordinates	int lowestPixelSum = 1000;	int verticalRow[4] = {0, 0, 0, 0};	for (int i=0; i<4; i++){	  int col = verticalCol[i];	  for (int row=0; row<Height; row++){	    int pixelSum = pieceImage[row][col][0] + pieceImage[row][col][1] + pieceImage[row][col][2];	    if (pixelSum<lowestPixelSum){    	      verticalRow[i] = row;	      lowestPixelSum = pixelSum;	    }	  }	  lowestPixelSum = 1000;	}	//find the corresponding col values for horizontal coordinates	int horizontalCol[4] = {0, 0, 0, 0};	for (int i=0; i<4; i++){	  int row = horizontalRow[i];	  for (int col=0; col<Width; col++){	    int pixelSum = pieceImage[row][col][0] + pieceImage[row][col][1] + pieceImage[row][col][2];	    if (pixelSum<lowestPixelSum){	      horizontalCol[i] = col;	      lowestPixelSum = pixelSum;	    }	  }	  lowestPixelSum = 1000;	}	cout << "Hillary piece image coordinates in clockwise - Row,Col)" << endl;	cout << verticalRow[0] << "," << verticalCol[0] << endl;	cout << horizontalRow[0] << "," << horizontalCol[0] << endl;	cout << verticalRow[1] << "," << verticalCol[1] << endl;	cout << horizontalRow[1] << "," << horizontalCol[1] << endl;	cout << "Trump piece image coordinates in clockwise - Row,Col)" << endl;	cout << verticalRow[2] << "," << verticalCol[2] << endl;	cout << horizontalRow[2] << "," << horizontalCol[2] << endl;	cout << verticalRow[3] << "," << verticalCol[3] << endl;	cout << horizontalRow[3] << "," << horizontalCol[3] << endl;		// Write image data from image data matrix	/*	if (!(file=fopen(argv[4],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(outputHillaryImage, sizeof(unsigned char), Height_hillary*Width_hillary*BytesPerPixel_hillary, file);	fclose(file);	if (!(file=fopen(argv[5],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(outputTrumpImage, sizeof(unsigned char), Height_trump*Width_trump*BytesPerPixel_trump, file);	fclose(file);	*/	return 0;}