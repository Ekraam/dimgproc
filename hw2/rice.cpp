// Homework 2// This code implements error diffusion// Question 2.b// This code takes 6 arguments in the following format// program_name input_image.raw output_image.raw [Width = 256] [Height = 256] [option = FS/JJN/ST]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <stdio.h>#include <iostream>#include <stdlib.h>#define _USE_MATH_DEFINES#include <math.h>#include <time.h>#include <cmath>#include <vector>#include <algorithm>#include <string>using namespace std;int main(int argc, char *argv[]){ 	// Define file pointer and variables	FILE *file;	int Height = 256;	int Width = 256;	int BytesPerPixel = 3;	string option = "";		// Check for proper syntax	if (argc < 6){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "This program performs analysis on rice image" << endl;		cout << "You must have 6 arguments in the following format" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 3] [Width = 256] [Height = 256]" << endl;		return 0;	}	//Get the command line parameters in the appropriate variables	else{	  BytesPerPixel = atoi(argv[3]);	  Width = atoi(argv[4]);	  Height = atoi(argv[5]);	}		// Allocate image data array	unsigned char inputImage[Height][Width][BytesPerPixel];	// Read Image into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(inputImage, sizeof(unsigned char), Height*Width*BytesPerPixel, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	//create blank new image arrays	unsigned char outputImage[Height][Width];	// convert image to grayscale	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    outputImage[row][col] = (unsigned char)(0.21*inputImage[row][col][0] + 0.72*inputImage[row][col][1] + 0.07*inputImage[row][col][2]);	  }	}	// create vector to store frequency of grayscale	vector<int> freq;	freq.resize(256);	for (int i=0; i<256; i++)	  freq[i] = 0;	// binarize the image	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    freq[outputImage[row][col]] += 1;	  }	}	// count the bin with max frequency	int max = -1;	int grayVal = 0;	for (int i=0; i<256; i++){	  if (freq[i]>max){	    max = freq[i];	    grayVal = i;	  }	}	// binarize the image	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    if (abs(outputImage[row][col]-grayVal)>11)	      outputImage[row][col] = 255;	    else	      outputImage[row][col] = 0;	  }	}	// remove isolated single white pixels	for (int row=1; row<Height-1; row++){	  for (int col=1; col<Width-1; col++){	    if (outputImage[row][col]==255 && outputImage[row+1][col]==0 && outputImage[row-1][col]==0 && outputImage[row][col+1]==0 && outputImage[row][col-1]==0)	      outputImage[row][col] = 0;	  }	}	// remove isolated double white pixels	for (int row=1; row<Height-2; row++){	  for (int col=1; col<Width-2; col++){	    // 2 horizontal pixels	    if (outputImage[row][col]==255 && outputImage[row][col+1]==255 && outputImage[row][col-1]==0 && outputImage[row][col+2]==0 && outputImage[row-1][col]==0 && outputImage[row-1][col+1]==0 && outputImage[row+1][col]==0 && outputImage[row+1][col+1]==0){	      outputImage[row][col] = 0;	      outputImage[row][col+1] = 0;	    }	    // 2 vertical pixels	    if (outputImage[row][col]==255 && outputImage[row+1][col]==255 && outputImage[row-1][col]==0 && outputImage[row+2][col]==0 && outputImage[row][col-1]==0 && outputImage[row][col+1]==0 && outputImage[row+1][col-1]==0 && outputImage[row+1][col+1]==0){	      outputImage[row][col] = 0;	      outputImage[row+1][col] = 0;	    }	  }	}	// Write image data from image data matrix		if (!(file=fopen(argv[2],"wb"))) {	  cout << "Cannot open file: " << argv[2] << endl;	  exit(1);	}	fwrite(outputImage, sizeof(unsigned char), Height*Width, file);	fclose(file);       		return 0;}