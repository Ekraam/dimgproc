// Homework 2// This code performs analysis on rice image// Question 3.a// This code takes 6 arguments in the following format// program_name input_image.raw output_image.raw [BytesPerPixel = 3] [Width = 256] [Height = 256]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <stdio.h>#include <iostream>#include <stdlib.h>#define _USE_MATH_DEFINES#include <math.h>#include <time.h>#include <cmath>#include <vector>#include <algorithm>#include <string>using namespace std;int main(int argc, char *argv[]){ 	// Define file pointer and variables	FILE *file;	int Height = 256;	int Width = 256;	int BytesPerPixel = 3;	string option = "";		// Check for proper syntax	if (argc < 6){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "This program performs analysis on rice image" << endl;		cout << "You must have 6 arguments in the following format" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 3] [Width = 256] [Height = 256]" << endl;		return 0;	}	//Get the command line parameters in the appropriate variables	else{	  BytesPerPixel = atoi(argv[3]);	  Width = atoi(argv[4]);	  Height = atoi(argv[5]);	}		// Allocate image data array	unsigned char inputImage[Height][Width][BytesPerPixel];	// Read Image into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(inputImage, sizeof(unsigned char), Height*Width*BytesPerPixel, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	//create blank new image arrays	unsigned char outputImage[Height][Width];	// convert image to grayscale	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    outputImage[row][col] = (unsigned char)(0.21*inputImage[row][col][0] + 0.72*inputImage[row][col][1] + 0.07*inputImage[row][col][2]);	    //outputImage[row][col] = (unsigned char)((inputImage[row][col][0] + inputImage[row][col][1] + inputImage[row][col][2])/3.0);	  }	}	// create vector to store frequency of grayscale	vector<int> freq;	freq.resize(256);	for (int i=0; i<256; i++)	  freq[i] = 0;	// binarize the image	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    freq[outputImage[row][col]] += 1;	  }	}	// count the bin with max frequency	int maxi = -1;	int grayVal = 0;	for (int i=0; i<256; i++){	  if (freq[i]>maxi){	    maxi = freq[i];	    grayVal = i;	  }	}	// binarize the image	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    if (abs(outputImage[row][col]-grayVal)>11)	      outputImage[row][col] = 255;	    else	      outputImage[row][col] = 0;	  }	}	// remove isolated single white pixels	for (int row=1; row<Height-1; row++){	  for (int col=1; col<Width-1; col++){	    if (outputImage[row][col]==255 && outputImage[row+1][col]==0 && outputImage[row-1][col]==0 && outputImage[row][col+1]==0 && outputImage[row][col-1]==0)	      outputImage[row][col] = 0;	  }	}	// remove isolated double white pixels	for (int row=1; row<Height-2; row++){	  for (int col=1; col<Width-2; col++){	    // 2 horizontal pixels	    if (outputImage[row][col]==255 && outputImage[row][col+1]==255 && outputImage[row][col-1]==0 && outputImage[row][col+2]==0 && outputImage[row-1][col]==0 && outputImage[row-1][col+1]==0 && outputImage[row+1][col]==0 && outputImage[row+1][col+1]==0){	      outputImage[row][col] = 0;	      outputImage[row][col+1] = 0;	    }	    // 2 vertical pixels	    if (outputImage[row][col]==255 && outputImage[row+1][col]==255 && outputImage[row-1][col]==0 && outputImage[row+2][col]==0 && outputImage[row][col-1]==0 && outputImage[row][col+1]==0 && outputImage[row+1][col-1]==0 && outputImage[row+1][col+1]==0){	      outputImage[row][col] = 0;	      outputImage[row+1][col] = 0;	    }	  }	}	// dilation of dark rice grains in binary image	for (int i=0; i<2; i++){	  for (int row=392; row<483; row++){	    for (int col=162; col<313; col++){	      if (outputImage[row][col]==255){		/*outputImage[row-1][col-1] = 2;		outputImage[row-1][col+1] = 2;		outputImage[row+1][col+1] = 2;		outputImage[row+1][col-1] = 2;*/		outputImage[row-1][col] = 2;		outputImage[row][col-1] = 2;		outputImage[row+1][col] = 2;		outputImage[row][col+1] = 2;	      }	    }	  }		  for (int row=0; row<Height; row++){	    for (int col=0; col<Width; col++){	      if (outputImage[row][col]==2)		outputImage[row][col]=255;	    }	  }	}	// create a complement of the image	vector<vector <int> > complementImage;	complementImage.resize(Height);	for (int row=0; row<Height; row++)	  complementImage[row].resize(Width);	// fill the complement image	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    if (outputImage[row][col]==255)	      complementImage[row][col] = 1000;	    else	      complementImage[row][col] = 1;	  }	}	// label connected components in connected image	int labelCounter = 2;	for (int row=1; row<Height-1; row++){	  for (int col=1; col<Width-1; col++){	    int mini = 0;	    if (complementImage[row][col]==1){	      	      	      int m1 = complementImage[row][col-1];	      int m2 = complementImage[row-1][col-1];	      int m3 = complementImage[row-1][col];	      int m4 = complementImage[row-1][col+1];	      	      mini = min(m4, min(m2, min(m1, m3)));	      if (mini==1000){		complementImage[row][col] = labelCounter;		labelCounter++;	      }	      else{		complementImage[row][col] = mini;	      }	    }	  }	}	// remove holes using the connected components in final image	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    if (complementImage[row][col]==1)	      outputImage[row][col] = 0;	    else	      outputImage[row][col] = 255;	  }	}	// shrinking	vector<vector <int> > shrinkImage;	shrinkImage.resize(Height);	for (int row=0; row<Height; row++)	  shrinkImage[row].resize(Width);	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    shrinkImage[row][col] = outputImage[row][col];	  }	}	vector<vector <int> > conM;	conM.resize(Height);	for (int row=0; row<Height; row++)	  conM[row].resize(Width);		bool change = true;	int iter = 0;	while (change){	  iter++;	  	  for (int row=0; row<Height; row++){	    for (int col=0; col<Width; col++){	      conM[row][col] = 0;	    }	  }	  	  for (int row=1; row<Height-1; row++){	    for (int col=1; col<Width-1; col++){	      	      if (shrinkImage[row][col]==255){				int M1 = shrinkImage[row-1][col-1];		int M2 = shrinkImage[row-1][col];		int M3 = shrinkImage[row-1][col+1];		int M4 = shrinkImage[row][col-1];		int M6 = shrinkImage[row][col+1];		int M7 = shrinkImage[row+1][col-1];		int M8 = shrinkImage[row+1][col];		int M9 = shrinkImage[row+1][col+1];	      		int bond = 0;				if (M1==255)		  bond += 1;		if (M2==255)		  bond += 2;		if (M3==255)		  bond += 1;		if (M4==255)		  bond += 2;		if (M6==255)		  bond += 2;		if (M7==255)		  bond += 1;		if (M8==255)		  bond += 2;		if (M9==255)		  bond += 1;				if (bond==1 && (M1==255 || M3==255 || M7==255 || M9==255))		  conM[row][col] = 1;				if (bond==2 && (M2==255 || M4==255 || M6==255 || M8==255))		  conM[row][col] = 1;				if (bond==3 && ((M1==255 && M2==255) || (M2==255 && M3==255) || (M3==255 && M6==255) || (M6==255 && M9==255) || (M9==255 && M8==255) || (M8==255 && M7==255) || (M7==255 && M4==255) || (M4==255 && M1==255)))		  conM[row][col] = 1;				if (bond==4 && ((M1==255 && M2==255 && M3==255) || (M3==255 && M6==255 && M9==255) || (M7==255 && M8==255 && M9==255) || (M1==255 && M4==255 && M7==255)))		  conM[row][col] = 1;				if (bond==5 && ((M1==255 && M2==255 && M6==255) || (M2==255 && M6==255 && M9==255) || (M4==255 && M2==255 && M3==255) || (M3==255 && M6==255 && M8==255) || (M2==255 && M3==255 && M6==255) || (M1==255 && M2==255 && M4==255) || (M4==255 && M7==255 && M8==255) || (M6==255 && M8==255 && M9==255)))		  conM[row][col] = 1;				if (bond==6 && ((M1==255 && M2==255 && M6==255 && M9==255) || (M2==255 && M3==255 && M4==255 && M7==255) || (M1==255 && M2==255 && M3==255 && M6==255) || (M2==255 && M3==255 && M6==255 && M9==255) || (M1==255 && M2==255 && M3==255 && M4==255) || (M1==255 && M2==255 && M4==255 && M7==255) || (M1==255 && M4==255 && M7==255 && M8==255) || (M4==255 && M7==255 && M8==255 && M9==255) || (M6==255 && M7==255 && M8==255 && M9==255) || (M3==255 && M6==255 && M8==255 && M9==255)))		  conM[row][col] = 1;				if (bond==7 && ((M1==255 && M2==255 && M3==255 && M6==255 && M9==255) || (M1==255 && M2==255 && M3==255 && M4==255 && M7==255) || (M1==255 && M4==255 && M7==255 && M8==255 && M9==255) || (M3==255 && M6==255 && M7==255 && M8==255 && M9==255)))		  conM[row][col] = 1;				if (bond==8 && ((M1==0 && M4==0 && M7==0) || (M1==0 && M2==0 && M3==0) || (M3==0 && M6==0 && M9==0) || (M7==0 && M8==0 && M9==0)))		  conM[row][col] = 1;				if (bond==9 && ((M1==0 && M2==0) || (M2==0 && M3==0) || (M3==0 && M6==0) || (M6==0 && M9==0) || (M9==0 && M8==0) || (M8==0 && M7==0) || (M7==0 && M4==0) || (M4==0 && M1==0)))		  conM[row][col] = 1;				if (bond==10 && (M2==0 || M4==0 || M6==0 || M8==0))		  conM[row][col] = 1;			      }	    }	  }	  	  change = false;	  // unconditional mark pattern application - stage 2	  for (int row=1; row<Height-1; row++){	    for (int col=1; col<Width-1; col++){	      	      int M1 = conM[row-1][col-1];	      int M2 = conM[row-1][col];	      int M3 = conM[row-1][col+1];	      int M4 = conM[row][col-1];	      int M5 = conM[row][col];	      int M6 = conM[row][col+1];	      int M7 = conM[row+1][col-1];	      int M8 = conM[row+1][col];	      int M9 = conM[row+1][col+1];	      	      if (M5==1){		if ( (M1==1 && M2+M3+M4+M6+M7+M8+M9==0) || (M3==1 && M1+M2+M4+M6+M7+M8+M9==0))		  shrinkImage[row][col] = 255;		else if ( (M8==1 && M1+M2+M3+M4+M6+M7+M9==0) || (M6==1 && M1+M2+M3+M4+M7+M8+M9==0))		  shrinkImage[row][col] = 255;		else if ((M2+M3+M4==3 && M1+M6+M7+M8+M9==0) || (M1+M2+M6==3 && M3+M4+M7+M8+M9==0) || (M2+M6+M9==3 && M1+M3+M4+M7+M8==0) || (M3+M6+M8==3 && M1+M2+M4+M7+M9==0) || (M4+M7+M9==3 && M1+M2+M3+M6+M8==0))		  shrinkImage[row][col] = 255;		else if ((M3+M7==2 && M2+M6>=1 && M1+M4+M8+M9==0) || (M1+M9==2 && M2+M4>=1 && M3+M6+M7+M8==0) || (M3+M7==2 && M4+M8>=1 && M1+M2+M6+M9==0) || (M1+M9==2 && M6+M8>=1 && M2+M3+M4+M7==0))		  shrinkImage[row][col] = 255;		else if (M1+M2+M4==3)		  shrinkImage[row][col] = 255;		else if ((M2+M4+M6==3 && M3+M8+M9==0) || (M2+M4+M6==3 && M1+M7+M8==0) || (M8+M4+M6==3 && M1+M2+M7==0) || (M8+M4+M6==3 && M2+M3+M9==0) || (M2+M4+M8==3 && M6+M7+M9==0) || (M2+M4+M8==3 && M1+M3+M6==0) || (M2+M6+M8==3 && M1+M3+M4==0) || (M2+M6+M8==3 && M4+M7+M9==0))		  shrinkImage[row][col] = 255;		else if ( (M1+M3==2 && M7+M8+M9>=1) || (M1+M7==2 && M3+M6+M9>=1) || (M7+M9==2 && M1+M2+M3>=1) || (M3+M9==2 && M1+M4+M7>=1) )		  shrinkImage[row][col] = 255;		else if ( (M2+M6+M7==3 && M3+M4+M8==0) || (M2+M4+M9==3 && M1+M6+M8==0) || (M3+M4+M8==3 && M2+M6+M7==0) || (M1+M6+M8==3 && M2+M4+M9==0))		  shrinkImage[row][col] = 255;		else{		  shrinkImage[row][col] = 0;		  change = true;		}	      }	      	    }	  }	}	int riceCount = 0;	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    if (shrinkImage[row][col]==255)	      riceCount++;	  }	}	cout << "The rice count from the image is " << riceCount << endl;	// thinning operation	vector<vector <int> > thinImage;	thinImage.resize(Height);	for (int row=0; row<Height; row++)	  thinImage[row].resize(Width);	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    thinImage[row][col] = outputImage[row][col];	  }	}	change = true;	while (change){	  	  for (int row=0; row<Height; row++){	    for (int col=0; col<Width; col++){	      conM[row][col]=0;	    }	  }	  for (int row=1; row<Height-1; row++){	    for (int col=1; col<Width-1; col++){	      	      if (thinImage[row][col]==255){				int M1 = thinImage[row-1][col-1];		int M2 = thinImage[row-1][col];		int M3 = thinImage[row-1][col+1];		int M4 = thinImage[row][col-1];		int M6 = thinImage[row][col+1];		int M7 = thinImage[row+1][col-1];		int M8 = thinImage[row+1][col];		int M9 = thinImage[row+1][col+1];	      		int bond = 0;				if (M1==255)		  bond += 1;		if (M2==255)		  bond += 2;		if (M3==255)		  bond += 1;		if (M4==255)		  bond += 2;		if (M6==255)		  bond += 2;		if (M7==255)		  bond += 1;		if (M8==255)		  bond += 2;		if (M9==255)		  bond += 1;		if (bond==4 && ((M1==255 && M2==255 && M3==255) || (M3==255 && M6==255 && M9==255) || (M7==255 && M8==255 && M9==255) || (M1==255 && M4==255 && M7==255) || (M2+M6==255*2) || (M6+M8==255*2) || (M8+M4==255*2) || (M4+M2==255*2)))		  conM[row][col] = 1;				if (bond==5 && ((M1==255 && M2==255 && M6==255) || (M2==255 && M6==255 && M9==255) || (M4==255 && M2==255 && M3==255) || (M3==255 && M6==255 && M8==255) || (M2==255 && M3==255 && M6==255) || (M1==255 && M2==255 && M4==255) || (M4==255 && M7==255 && M8==255) || (M6==255 && M8==255 && M9==255)))		  conM[row][col] = 1;				if (bond==6 && ((M1==255 && M2==255 && M6==255 && M9==255) || (M2==255 && M3==255 && M4==255 && M7==255) || (M1==255 && M2==255 && M3==255 && M6==255) || (M2==255 && M3==255 && M6==255 && M9==255) || (M1==255 && M2==255 && M3==255 && M4==255) || (M1==255 && M2==255 && M4==255 && M7==255) || (M1==255 && M4==255 && M7==255 && M8==255) || (M4==255 && M7==255 && M8==255 && M9==255) || (M6==255 && M7==255 && M8==255 && M9==255) || (M3==255 && M6==255 && M8==255 && M9==255)))		  conM[row][col] = 1;				if (bond==7 && ((M1==255 && M2==255 && M3==255 && M6==255 && M9==255) || (M1==255 && M2==255 && M3==255 && M4==255 && M7==255) || (M1==255 && M4==255 && M7==255 && M8==255 && M9==255) || (M3==255 && M6==255 && M7==255 && M8==255 && M9==255)))		  conM[row][col] = 1;				if (bond==8 && ((M1==0 && M4==0 && M7==0) || (M1==0 && M2==0 && M3==0) || (M3==0 && M6==0 && M9==0) || (M7==0 && M8==0 && M9==0)))		  conM[row][col] = 1;				if (bond==9 && ((M1==0 && M2==0) || (M2==0 && M3==0) || (M3==0 && M6==0) || (M6==0 && M9==0) || (M9==0 && M8==0) || (M8==0 && M7==0) || (M7==0 && M4==0) || (M4==0 && M1==0)))		  conM[row][col] = 1;				if (bond==10 && (M2==0 || M4==0 || M6==0 || M8==0))		  conM[row][col] = 1;	      }	    }	  }	  change = false;	  // unconditional mark pattern application - stage 2	  for (int row=1; row<Height-1; row++){	    for (int col=1; col<Width-1; col++){	      	      int M1 = conM[row-1][col-1];	      int M2 = conM[row-1][col];	      int M3 = conM[row-1][col+1];	      int M4 = conM[row][col-1];	      int M5 = conM[row][col];	      int M6 = conM[row][col+1];	      int M7 = conM[row+1][col-1];	      int M8 = conM[row+1][col];	      int M9 = conM[row+1][col+1];	      	      if (M5==1){		if ( (M1==1 && M2+M3+M4+M6+M7+M8+M9==0) || (M3==1 && M1+M2+M4+M6+M7+M8+M9==0))		  thinImage[row][col] = 255;		else if ( (M8==1 && M1+M2+M3+M4+M6+M7+M9==0) || (M6==1 && M1+M2+M3+M4+M7+M8+M9==0))		  thinImage[row][col] = 255;		else if ((M1+M2==2 && M3+M4+M6+M7+M8+M9==0) || (M2+M3==2 && M1+M4+M6+M7+M8+M9==0) || (M3+M6==2 && M1+M2+M4+M7+M8+M9==0) || (M6+M9==2 && M1+M2+M3+M4+M7+M8==0) || (M9+M8==2 && M1+M2+M3+M4+M6+M7==0) || (M8+M7==2 && M1+M2+M3+M4+M6+M9==0) || (M7+M4==2 && M1+M2+M3+M6+M8+M9==0) || (M4+M1==2 && M2+M3+M6+M7+M8+M9==0))		  thinImage[row][col] = 255;		else if ((M2+M3+M4==3 && M1+M6+M7+M8+M9==0) || (M1+M2+M6==3 && M3+M4+M7+M8+M9==0) || (M2+M6+M9==3 && M1+M3+M4+M7+M8==0) || (M3+M6+M8==3 && M1+M2+M4+M7+M9==0)) //|| (M4+M7+M9==3 && M1+M2+M3+M6+M8==0))		  thinImage[row][col] = 255;		else if ((M3+M7==2 && M2+M6>=1 && M1+M4+M8+M9==0) || (M1+M9==2 && M2+M4>=1 && M3+M6+M7+M8==0) || (M3+M7==2 && M4+M8>=1 && M1+M2+M6+M9==0) || (M1+M9==2 && M6+M8>=1 && M2+M3+M4+M7==0))		  thinImage[row][col] = 255;		else if (M1+M2+M4==3)		  thinImage[row][col] = 255;		else if ((M2+M4+M6==3 && M3+M8+M9==0) || (M2+M4+M6==3 && M1+M7+M8==0) || (M8+M4+M6==3 && M1+M2+M7==0) || (M8+M4+M6==3 && M2+M3+M9==0) || (M2+M4+M8==3 && M6+M7+M9==0) || (M2+M4+M8==3 && M1+M3+M6==0) || (M2+M6+M8==3 && M1+M3+M4==0) || (M2+M6+M8==3 && M4+M7+M9==0))		  thinImage[row][col] = 255;		else if ( (M1+M3==2 && M7+M8+M9>=1) || (M1+M7==2 && M3+M6+M9>=1) || (M7+M9==2 && M1+M2+M3>=1) || (M3+M9==2 && M1+M4+M7>=1) )		  thinImage[row][col] = 255;		else if ( (M2+M6+M7==3 && M3+M4+M8==0) || (M2+M4+M9==3 && M1+M6+M8==0) || (M3+M4+M8==3 && M2+M6+M7==0) || (M1+M6+M8==3 && M2+M4+M9==0))		  thinImage[row][col] = 255;		else{		  thinImage[row][col] = 0;		  change = true;		}	      }	      	    }	  }	} 	//uncomment to show shrinking or thinning images	/*	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    outputImage[row][col] = shrinkImage[row][col];	  }	}*/		// get connected components on original binarized rice image for area and length	// length	vector<vector <int> > areaImage;	areaImage.resize(Height);	for (int row=0; row<Height; row++)	  areaImage[row].resize(Width);	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    areaImage[row][col] = outputImage[row][col];	  }	}	// length	vector<vector <int> > lengthImage;	lengthImage.resize(Height);	for (int row=0; row<Height; row++)	  lengthImage[row].resize(Width);	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    lengthImage[row][col] = thinImage[row][col];	  }	}	vector<vector <int> > labelList;	labelList.resize(riceCount);	for (int i=0; i<riceCount; i++)	  labelList[i].resize(5);	    	for (int i=0; i<riceCount; i++){	  for (int j=0; j<5; j++){	    labelList[i][j] = 0;	  }	}	int label = 2;	for (int row=0; row<Height; row++){	  for (int col=0; col<Width; col++){	    if (shrinkImage[row][col]==255 && thinImage[row][col]==255){	      areaImage[row][col] = label;	      lengthImage[row][col] = label;	      labelList[label-2][0] = row;	      labelList[label-2][1] = col;	      label++;	    }	    else if (shrinkImage[row][col]==255){	      areaImage[row-1][col] = label;	      lengthImage[row-1][col] = label;	      labelList[label-2][0] = row-1;	      labelList[label-2][1] = col;	      label++;	    }	  }	}	change = true;	while (change){	  change = false;	  for (int row=1; row<Height-1; row++){	    for (int col=1; col<Width-1; col++){	      	      // area	      if (areaImage[row][col]!=0 && areaImage[row][col]!=255){		int pixelVal = areaImage[row][col];		if (areaImage[row-1][col]==255){		  areaImage[row-1][col]=pixelVal;		  labelList[pixelVal-2][2] = pixelVal;		  labelList[pixelVal-2][3] += 1;		  change = true;		}		if (areaImage[row][col+1]==255){		  areaImage[row][col+1]=pixelVal;		  labelList[pixelVal-2][2] = pixelVal;		  labelList[pixelVal-2][3] += 1;		  change = true;		}		if (areaImage[row+1][col]==255){		  areaImage[row+1][col]=pixelVal;		  labelList[pixelVal-2][2] = pixelVal;		  labelList[pixelVal-2][3] += 1;		  change = true;		}		if (areaImage[row][col-1]==255){		  areaImage[row][col-1]=pixelVal;		  labelList[pixelVal-2][2] = pixelVal;		  labelList[pixelVal-2][3] += 1;		  change = true;		}	      }	      // length	      if (lengthImage[row][col]!=0 && lengthImage[row][col]!=255){		int pixelVal = lengthImage[row][col];		if (lengthImage[row-1][col]==255){		  lengthImage[row-1][col]=pixelVal;		  labelList[pixelVal-2][2] = pixelVal;		  labelList[pixelVal-2][4] += 1;		  change = true;		}		if (lengthImage[row][col+1]==255){		  lengthImage[row][col+1]=pixelVal;		  labelList[pixelVal-2][2] = pixelVal;		  labelList[pixelVal-2][4] += 1;		  change = true;		}		if (lengthImage[row+1][col]==255){		  lengthImage[row+1][col]=pixelVal;		  labelList[pixelVal-2][2] = pixelVal;		  labelList[pixelVal-2][4] += 1;		  change = true;		}		if (lengthImage[row][col-1]==255){		  lengthImage[row][col-1]=pixelVal;		  labelList[pixelVal-2][2] = pixelVal;		  labelList[pixelVal-2][4] += 1;		  change = true;		}		if (lengthImage[row-1][col-1]==255){		  lengthImage[row-1][col-1]=pixelVal;		  labelList[pixelVal-2][2] = pixelVal;		  labelList[pixelVal-2][4] += 1;		  change = true;		}		if (lengthImage[row-1][col+1]==255){		  lengthImage[row-1][col+1]=pixelVal;		  labelList[pixelVal-2][2] = pixelVal;		  labelList[pixelVal-2][4] += 1;		  change = true;		}		if (lengthImage[row+1][col+1]==255){		  lengthImage[row+1][col]=pixelVal;		  labelList[pixelVal-2][2] = pixelVal;		  labelList[pixelVal-2][4] += 1;		  change = true;		}		if (lengthImage[row+1][col-1]==255){		  lengthImage[row][col-1]=pixelVal;		  labelList[pixelVal-2][2] = pixelVal;		  labelList[pixelVal-2][4] += 1;		  change = true;		}	      }	   	    }	  }	}	for (int i=0; i<riceCount; i++)	  cout << "Rice at " << labelList[i][0] << "," << labelList[i][1] << " Area: "<< labelList[i][3] << " Length: " << labelList[i][4] << endl;	// Write image data from image data matrix		if (!(file=fopen(argv[2],"wb"))) {	  cout << "Cannot open file: " << argv[2] << endl;	  exit(1);	}	fwrite(outputImage, sizeof(unsigned char), Height*Width, file);	fclose(file);       		return 0;}