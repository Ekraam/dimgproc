// Homework 3// This code implements // Question // This code takes 11 arguments in the following format// program_name input_image.raw logo_image.raw output_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256] [BytesPerPixel_Logo = 1] [Width_Logo = 256] [Height_Logo = 256] [background = 1]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <opencv/cv.h>#include <opencv2/core/core.hpp>#include <opencv2/highgui/highgui.hpp>#include <opencv2/features2d/features2d.hpp>#include <opencv2/imgproc/imgproc.hpp>//#include <opencv2/xfeatures2d.hpp>#include <fstream>#include <stdio.h>#include <iostream>#include <stdlib.h>#include <sstream>#define _USE_MATH_DEFINES#include <math.h>#include <cmath>#include <vector>#include <string>#include <algorithm>#include <limits.h>using namespace std;using namespace cv;int main(int argc, char *argv[]){  FILE *file;  // dimensions  int jeepRow = 500;  int jeepCol= 380;  int busRow = 450;  int busCol = 240;    // Allocate image data array  unsigned char jeepImage[jeepRow][jeepCol][3];  unsigned char busImage[busRow][busCol][3];  ///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////  // transfer Images to opencv  Mat jeepCVImg = imread("./HW3 Images/P2/jeep.jpg");  Mat busCVImg = imread("./HW3 Images/P2/bus.jpg", CV_LOAD_IMAGE_UNCHANGED);  // convert to grayscale  Mat jeepCVImg_gray;  Mat busCVImg_gray;  cvtColor(jeepCVImg, jeepCVImg_gray, CV_BGR2GRAY);  cvtColor(busCVImg, busCVImg_gray, CV_BGR2GRAY);  // get SIFT features  //cv::SiftFeatureDetector detector;  Ptr<FeatureDetector> featureDetector = FeatureDetector::create("SIFT");  vector<KeyPoint> keypoints;  featureDetector->detect(jeepCVImg_gray, keypoints);  Scalar keypointColor = Scalar(255, 0, 0);  drawKeypoints(jeepCVImg_gray, keypoints, jeepCVImg, keypointColor, DrawMatchesFlags::DEFAULT);  // write resulting keypoints to image  //Mat img(jeepRow,jeepCol,CV_8UC3,jeepImage);  if (jeepCVImg.empty()){    cout << "empty image found " << endl;  }  namedWindow("MyWindow", CV_WINDOW_AUTOSIZE);   imshow("MyWindow", jeepCVImg);  waitKey(0);    return 0;}