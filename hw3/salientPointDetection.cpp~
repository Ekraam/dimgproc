// Homework 3// This code implements // Question // This code takes 11 arguments in the following format// program_name input_image.raw logo_image.raw output_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256] [BytesPerPixel_Logo = 1] [Width_Logo = 256] [Height_Logo = 256] [background = 1]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <opencv2/core/core.hpp>#include <opencv2/highgui/highgui.hpp>#include <opencv2/features2d/features2d.hpp>#include <opencv2/imgproc/imgproc.hpp>//#include <opencv2/xfeatures2d.hpp>#include <fstream>#include <stdio.h>#include <iostream>#include <stdlib.h>#include <sstream>#define _USE_MATH_DEFINES#include <math.h>#include <cmath>#include <vector>#include <string>#include <algorithm>#include <limits.h>using namespace std;using namespace cv;int main(int argc, char *argv[]){  FILE *file;  // image names  string jeepName = "./HW3 Images/P2/Jeep.raw";  string busName = "./HW3 Images/P2/Bus.raw";  // dimensions  int jeepRow = 500;  int jeepCol= 380;  int busRow = 450;  int busCol = 240;    // Allocate image data array  unsigned char jeepImage[jeepRow][jeepCol];  unsigned char busImage[busRow][busCol];  ///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////  // Read Images into image data matrix  // jeep  if (!(file=fopen("./","rb"))) {    cout << "Cannot open file: " << jeepName << endl;    exit(1);  }  fread(jeepImage, sizeof(unsigned char), jeepRow*jeepCol*3, file);  fclose(file);  // bus  if (!(file=fopen("./","rb"))) {    cout << "Cannot open file: " << busName << endl;    exit(1);  }  fread(busImage, sizeof(unsigned char), busRow*busCol*3, file);  fclose(file);  // transfer Images to opencv  Mat jeepCVImg = Mat(jeepRow, jeepCol, CV_8UC1, jeepImage);  Mat busCVImg = Mat(busRow, busCol, CV_8UC1, busImage);  // convert to grayscale  Mat jeepCVImg_gray;  Mat busCVImg_gray;  cvtColor(jeepCVImg, jeepCVImg_gray, CV_BGR2GRAY);  cvtColor(busCVImg, busCVImg_gray, CV_BGR2GRAY);  // get SIFT features  Ptr<FeatureDetector> featureDetector = FeatureDetector::create("SIFT");  vector<KeyPoint> keypoints;  drawKeypoints(jeepCVImg_gray, keypoints, jeepCVImg);  /*  cv::Ptr<Feature2D> f2d = xfeatures2d::SIFT::create();  std::vector<KeyPoint> keypoints_1;      f2d->detect( jeepCVImg, keypoints_1 );  */  // write resulting keypoints to image    return 0;}