// Homework 3// This code implements // Question // This code takes 11 arguments in the following format// program_name input_image.raw logo_image.raw output_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256] [BytesPerPixel_Logo = 1] [Width_Logo = 256] [Height_Logo = 256] [background = 1]// //// Name: Ekraam Sabir // USC ID: 1428-2892-90// email: esabir@usc.edu// #include <fstream>#include <stdio.h>#include <iostream>#include <stdlib.h>#define _USE_MATH_DEFINES#include <math.h>#include <cmath>#include <vector>#include <algorithm>using namespace std;int main(int argc, char *argv[]){  FILE *file;  /*	// Define file pointer and variables	int BytesPerPixel = 3;	int Height = 256;	int Width = 256;	int BytesPerPixel_logo = 3;	int Height_logo = 256;	int Width_logo = 256;	int background = 0;		// Check for proper syntax	if (argc < 11){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "This program performs homographic transformation for image overlay" << endl;		cout << "You must have 11 arguments in the following format" << endl;		cout << "program_name input_image.raw logo_image.raw output_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256] [BytesPerPixel_Logo = 1] [Width_Logo = 256] [Height_Logo = 256] [background = 1]" << endl;		return 0;	}	//Get the command line parameters in the appropriate variables	else{	  BytesPerPixel = atoi(argv[4]);	  Width = atoi(argv[5]);	  Height = atoi(argv[6]);	  BytesPerPixel_logo = atoi(argv[7]);	  Width_logo = atoi(argv[8]);	  Height_logo = atoi(argv[9]);	  background = atoi(argv[10]);	}  */    // Allocate image data array  int b = 5;  int** texture1 = new int*[128];  for (int i=0; i<128; i++){    texture1[i] = new int[128];  }    // Read Image into image data matrix  /*if (!(file=fopen("./HW3 Images/P1/Texture1.raw","rb"))) {    cout << "Cannot open file: " << "./HW3 Images/P1/Texture1.raw" << endl;    exit(1);  }  cout << "before read" << endl;  cout << " before read value " << texture1[0][0] << endl;  cout << sizeof texture1[0][0] << endl;  fread(texture1, sizeof texture1[0][0], 128*128, file);  fclose(file);  cout << "after reading and closing" << endl;  cout << "value of b " << b << endl;  cout << "texture1 " << texture1[0][0] << endl;*/  ifstream inFILE;  inFILE.open("./HW3 Images/P1/Texture1.raw");  for (int row=0; row<128; row++){    for (int col=0; col<128; col++){      inFILE >> texture1[row][col];    }  }  inFILE.close();    /*  // Read logo image into image data matrix  if (!(file=fopen(argv[2],"rb"))) {    cout << "Cannot open file: " << argv[1] <<endl;    exit(1);  }  fread(logoImage, sizeof(unsigned char), Height_logo*Width_logo*BytesPerPixel_logo, file);  fclose(file);  */    ///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////        // Write image data from image data matrix    if (!(file=fopen("./try.raw","wb"))) {    cout << "Cannot open file: " << "./try.raw" << endl;    exit(1);  }  fwrite(texture1, sizeof(int), 128*128 , file);  fclose(file);    for (int i=0; i<128; i++){    delete [] texture1[i];  }  cout << "clear loop" <<endl;  delete [] texture1;  cout << "release memory " << endl;  return 0;}